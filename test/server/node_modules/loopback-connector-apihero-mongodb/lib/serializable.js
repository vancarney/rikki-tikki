// Generated by CoffeeScript 1.9.0
var Binary, ObjectID, Serializable, _, _ref,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

_ref = require('mongodb'), ObjectID = _ref.ObjectID, Binary = _ref.Binary;

Serializable = (function(_super) {
  __extends(Serializable, _super);

  Serializable.prototype.__data = {};

  function Serializable(data, opts) {
    if (opts == null) {
      opts = {};
    }
    this.errors = null;
    this.__schema = opts.schema || {
      validators: {}
    };
    if (data) {
      this.setData(data);
    }
  }

  Serializable.prototype.setData = function(data) {
    _.each(data, (function(_this) {
      return function(v, k) {
        if (typeof v === 'string') {
          return v = v.replace(/\0/g, '');
        }
      };
    })(this));
    return this.__data = data;
  };

  Serializable.prototype.validate = function() {
    var k, path, v, validator, _i, _len, _ref1;
    if (process.env !== 'development') {
      for (k in attrs) {
        v = attrs[k];
        if ((path = this.__schema.paths[k]) != null) {
          _ref1 = path.validators || [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            validator = _ref1[_i];
            if (!(validator[0](v))) {
              return validator[1];
            }
          }
        } else {
          if (k !== this.idAttribute) {
            return this.className + " has no attribute '" + k + "'";
          }
        }
      }
    }
  };

  Serializable.prototype.isValid = function() {
    var valid;
    return (valid = this.validate()) === void 0 || valid === null;
  };

  Serializable.prototype.valueOf = function() {
    return this.toJSON();
  };

  Serializable.prototype.toJSON = function() {
    if (this.isValid()) {
      return this.__data;
    } else {
      return null;
    }
  };

  Serializable.prototype.serialize = function(maxDepth) {
    var branch, serialize;
    branch = {};
    serialize = (function(_this) {
      return function(doc, parentKey, maxDepth) {
        var key, subKey, value, _results;
        _results = [];
        for (key in doc) {
          value = doc[key];
          if (key.match(/^(v|ns)$/)) {
            continue;
          }
          branch[subKey = "" + parentKey + key] = Serializable.getMongoType(value);
          if ((Serializable.isHash(value)) && (maxDepth > 0)) {
            _results.push(serialize(value, subKey + ".", maxDepth - 1));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
    })(this);
    serialize(this.__data, '', maxDepth);
    return branch;
  };

  return Serializable;

})(Object);

Serializable.isHash = function(value) {
  if (typeof value === 'object') {
    return !(Array.isArray(value || value instanceof Date || value instanceof ObjectId || value instanceof BinData));
  }
  return false;
};

Serializable.getMongoType = function(obj) {
  var BinaryTypes, type;
  if (obj === void 0) {
    throw 'Serializable.getMongoType() requires an object argument';
  }
  if ((obj = arguments[0]) === null) {
    return 'null';
  }
  if ((type = typeof obj) !== 'object') {
    return "" + (type.charAt(0).toUpperCase()) + (type.slice(1));
  }
  if (obj && obj.constructor === Array) {
    return 'Array';
  }
  if (obj instanceof Date) {
    return 'Date';
  }
  if (obj instanceof Binary) {
    BinaryTypes = {};
    BinaryTypes[0x00] = 'generic';
    BinaryTypes[0x01] = 'function';
    BinaryTypes[0x02] = 'old';
    BinaryTypes[0x03] = 'UUID';
    BinaryTypes[0x05] = 'MD5';
    BinaryTypes[0x80] = 'user';
    return "Binary-" + BinaryTypes[obj.subtype()];
  }
  if (typeof obj.hasOwnProperty('getTimestamp' === 'function' && obj.getTimestamp() instanceof Date)) {
    return 'ObjectID';
  }
  return 'Object';
};

module.exports = Serializable;
