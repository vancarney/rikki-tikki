// Generated by CoffeeScript 1.9.0
var ApiHero, Document, EventEmitter, SyncService, Util, cnf, e, fs, path, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

EventEmitter = require('events').EventEmitter;

fs = require('fs');

path = require('path');

Util = require('./classes/utils');

global.logger = console;

ApiHero = (function(_super) {
  var __defaultDSName;

  __extends(ApiHero, _super);

  __defaultDSName = 'mongo';

  function ApiHero(app) {
    var services;
    _.extend(app.prototype, EventEmitter);
    module.exports.getApp = (function(_this) {
      return function() {
        return app;
      };
    })(this);
    services = [];
    this.router = ApiHero.Router.getInstance();
    this.router.addRoute("/api-client/__schema__.json", 'get', (function(_this) {
      return function(req, res) {
        var _ref;
        return (_ref = _this.router.getAdapter()) != null ? _ref.responseHandler(res, {
          status: 200,
          content: ApiHero.SchemaManager.getInstance().toJSON(Util.Env.isDevelopment())
        }) : void 0;
      };
    })(this));
    this.router.addRoute("/api-client/client(\.js)?", 'get', (function(_this) {
      return function(req, res) {
        var _ref;
        return (_ref = _this.router.getAdapter()) != null ? _ref.responseHandler(res, {
          status: 200,
          content: _this.router.getClient()
        }, {
          'Content-Type': 'text/javascript'
        }) : void 0;
      };
    })(this));
    app.set('legacyExplorer', false);
    app.ApiHero = ApiHero;
    app.on('ready', (function(_this) {
      return function() {
        return SyncService.getInstance();
      };
    })(this));
    ApiHero.DSManager.getInstance().initialize((function(_this) {
      return function(e, ok) {
        if (e == null) {
          return app.emit('ready');
        }
      };
    })(this));
  }

  return ApiHero;

})(EventEmitter);

ApiHero.init = function(app) {
  return new ApiHero(app);
};

ApiHero.addRoute = (function(_this) {
  return function(path, operation, handler) {
    var router;
    if ((router = ApiHero.Router.getInstance()) == null) {
      throw new Error('Adapter is not defined');
    }
    return router.addRoute(path, operation, handler);
  };
})(this);

try {
  require('rikki-tikki-client');
} catch (_error) {
  e = _error;
  throw new Error("rikki-tikki-client was not found. Try 'npm install rikki-tikki-client'");
  process.exit(1);
}

_.extend(ApiHero, require('./classes/router'));

ApiHero.Util = require('./classes/utils');

cnf = new (require('./classes/config/AppConfig'))();

ApiHero.Util.File.ensureDirExists(cnf.get('data_path'));

ApiHero.Util.File.ensureDirExists(cnf.get('trees_path'));

SyncService = require('./classes/services/SyncService');

Document = require('./classes/collections/Document');

ApiHero.model = function(name, schema) {
  var model, type, _this;
  if (schema == null) {
    schema = {};
  }
  if (!name) {
    throw "name is required for model";
  }
  if ((type = typeof name) !== 'string') {
    throw "name expected to be String type was '" + type + "'";
  }
  _this = this;
  model = function model(data, opts) { if (!(this instanceof ApiHero.model)) return _.extend(_this, new Document( data, opts )); };
  model.modelName = name;
  model.schema = schema;
  model.toClientSchema = function() {
    var ClientSchema;
    ClientSchema = require('./classes/schema/ClientSchema');
    return new ClientSchema(this.modelName, this.schema);
  };
  model.toAPISchema = function() {
    var APISchema;
    APISchema = require('./classes/schema/APISchema');
    return new APISchema(this.modelName, this.schema);
  };
  return model;
};

ApiHero.DSManager = require('./classes/datasource/DataSourceManager');

module.exports = ApiHero;
