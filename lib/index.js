// Generated by CoffeeScript 1.9.0
var APIOptions, ApiHero, Document, EventEmitter, ModuleManager, SyncInitializer, Util, e, fs, path, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

EventEmitter = require('events').EventEmitter;

fs = require('fs');

path = require('path');

Util = require('./classes/utils');

APIOptions = require('./classes/config/APIOptions');

global.logger = console;

ApiHero = (function(_super) {
  __extends(ApiHero, _super);

  function ApiHero(app, options) {
    if (!((app != null) && typeof app === 'function')) {
      throw 'argument[0] must be App reference';
    }
    _.extend(app.prototype, EventEmitter);
    module.exports.getApp = (function(_this) {
      return function() {
        return app;
      };
    })(this);
    _.each(options, (function(_this) {
      return function(v, k) {
        return APIOptions.set(k, v);
      };
    })(this));
    ApiHero.Util.File.ensureDirExists(APIOptions.get('data_path'));
    ApiHero.Util.File.ensureDirExists(APIOptions.get('trees_path'));
    this.router = ApiHero.Router.getInstance();
    this.router.addRoute("/api-client/__schema__.json", 'get', (function(_this) {
      return function(req, res) {
        var _ref;
        return (_ref = _this.router.getAdapter()) != null ? _ref.responseHandler(res, {
          status: 200,
          content: ApiHero.SchemaManager.getInstance().toJSON(Util.Env.isDevelopment())
        }) : void 0;
      };
    })(this));
    this.router.addRoute("/api-client/client(\.js)?", 'get', (function(_this) {
      return function(req, res) {
        var _ref;
        return (_ref = _this.router.getAdapter()) != null ? _ref.responseHandler(res, {
          status: 200,
          content: _this.router.getClient()
        }, {
          'Content-Type': 'text/javascript'
        }) : void 0;
      };
    })(this));
    app.set('legacyExplorer', false);
    app.ApiHero = ApiHero;
    app.on('ahero-initialized', (function(_this) {
      return function() {
        if (!Util.Env.isProduction()) {
          return SyncInitializer.init(ApiHero);
        }
      };
    })(this));
    ApiHero.DSManager.getInstance().initialize((function(_this) {
      return function(e, ok) {
        if (e != null) {
          console.log(e);
          process.exit(1);
        }
        return (new ModuleManager(app)).load(function(e, modules) {
          if (e != null) {
            throw e;
            process.exit(1);
          }
          ApiHero.loadedModules = modules;
          return app.emit('ahero-initialized');
        });
      };
    })(this));
  }

  return ApiHero;

})(EventEmitter);

ApiHero.init = function(app, options) {
  return new ApiHero(app, options);
};

ApiHero.loadedModules = null;

ApiHero.addRoute = (function(_this) {
  return function(path, operation, handler) {
    var router;
    if ((router = ApiHero.Router.getInstance()) == null) {
      throw new Error('Adapter is not defined');
    }
    return router.addRoute(path, operation, handler);
  };
})(this);

try {
  require('rikki-tikki-client');
} catch (_error) {
  e = _error;
  throw new Error("rikki-tikki-client was not found. Try 'npm install rikki-tikki-client'");
  process.exit(1);
}

_.extend(ApiHero, require('./classes/router'));

ApiHero.Util = require('./classes/utils');

ApiHero.SyncService = require('./classes/services/SyncService');

Document = require('./classes/collections/Document');

ApiHero.DSManager = require('./classes/datasource/DataSourceManager');

SyncInitializer = require('./classes/services/SyncInitializer');

ModuleManager = require('./classes/module/ModuleManager');

ApiHero.createSyncInstance = (function(_this) {
  return function(name, clazz) {
    return ApiHero.SyncService.getInstance().registerSyncInstance(name, new ApiHero.SyncService.SyncInstance(name, clazz));
  };
})(this);

ApiHero.destroySyncInstance = (function(_this) {
  return function(name) {
    return ApiHero.SyncService.getInstance().removeSyncInstance(name);
  };
})(this);

ApiHero.model = function(name, schema) {
  var model, type, _this;
  if (schema == null) {
    schema = {};
  }
  if (!name) {
    throw "name is required for model";
  }
  if ((type = typeof name) !== 'string') {
    throw "name expected to be String type was '" + type + "'";
  }
  _this = this;
  model = function model(data, opts) { if (!(this instanceof ApiHero.model)) return _.extend(_this, new Document( data, opts )); };
  model.modelName = name;
  model.schema = schema;
  model.toClientSchema = function() {
    var ClientSchema;
    ClientSchema = require('./classes/schema/ClientSchema');
    return new ClientSchema(this.modelName, this.schema);
  };
  model.toAPISchema = function() {
    var APISchema;
    APISchema = require('./classes/schema/APISchema');
    return new APISchema(this.modelName, this.schema);
  };
  return model;
};

module.exports = ApiHero;
