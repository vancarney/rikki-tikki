// Generated by CoffeeScript 1.8.0
var AdapterManager, RikkiTikkiAPI,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI || module.parent.exports;

AdapterManager = (function(_super) {
  __extends(AdapterManager, _super);

  function AdapterManager() {
    return AdapterManager.__super__.constructor.apply(this, arguments);
  }

  AdapterManager.prototype.__adapters = {};

  AdapterManager.prototype.registerAdapter = function(name, adapterClass) {
    return this.__adapters[name] = {
      adapter: adapterClass
    };
  };

  AdapterManager.prototype.listAdapters = function() {
    return Object.keys(this.__adapters);
  };

  AdapterManager.prototype.getAdapter = function(name) {
    if (this.__adapters[name] != null) {
      return this.__adapters[name].adapter;
    } else {
      return null;
    }
  };

  AdapterManager.prototype.createAdapter = function(name, options) {
    var adapter;
    if (typeof name === 'string') {
      if ((adapter = this.getAdapter(name)) == null) {
        throw "Adapter '" + name + "' was not defined";
      }
      return new adapter(options);
    } else if (RikkiTikki.Util.Object.isOfType(name, RikkiTikkiAPI.base_classes.AbstractAdapter)) {
      return new name(options);
    }
  };

  AdapterManager.prototype.unregisterAdapter = function(name) {
    return delete this.__adapters[name];
  };

  return AdapterManager;

})(RikkiTikkiAPI.base_classes.Singleton);

module.exports = AdapterManager;
