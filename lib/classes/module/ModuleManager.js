// Generated by CoffeeScript 1.9.0
var EventEmitter, ModuleManager, fs, path, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

fs = require('fs');

path = require('path');

EventEmitter = require('events').EventEmitter;

ModuleManager = (function(_super) {
  __extends(ModuleManager, _super);

  function ModuleManager(_at_app) {
    this.app = _at_app;
  }

  ModuleManager.prototype.getModules = function() {
    return this.__modules;
  };

  ModuleManager.prototype.saveModules = function() {};

  ModuleManager.prototype.load = function(callback) {
    var done, e, pkg;
    if (!(callback && typeof callback === 'function')) {
      throw 'callback required';
    }
    try {
      pkg = require("" + (process.cwd()) + path.sep + "package.json");
    } catch (_error) {
      e = _error;
      return callback(e);
    }
    if (!(pkg != null ? pkg.hasOwnProperty('dependencies') : void 0)) {
      return callback('unable to obtain package');
    }
    this.__modules = _.compact(_.uniq(_.map(_.keys(pkg.dependencies), (function(_this) {
      return function(name) {
        if ((name.match(/^apihero+\-+module+\-[a-z0-9\-_]+$/)) != null) {
          return name;
        } else {
          return null;
        }
      };
    })(this))));
    done = _.after(this.__modules.length, (function(_this) {
      return function() {
        return callback.apply(_this, arguments);
      };
    })(this));
    return _.each(this.__modules, (function(_this) {
      return function(m) {
        var module;
        try {
          module = require("" + m);
        } catch (_error) {
          e = _error;
          done("unable to load module '" + m + "'");
        }
        if (module === {}) {
          return done('module malformed. Is exports defined?');
        }
        if (typeof module.init !== 'function') {
          return done('module malformed. Is exports.init defined?');
        }
        try {
          module.init(_this.app);
        } catch (_error) {
          e = _error;
          return done(e);
        }
        return done(null, _this.__modules);
      };
    })(this));
  };

  return ModuleManager;

})(EventEmitter);

module.exports = ModuleManager;
