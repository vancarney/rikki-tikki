// Generated by CoffeeScript 1.10.0
var EventEmitter, ModuleManager, _, fs, path,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

fs = require('fs');

path = require('path');

EventEmitter = require('events').EventEmitter;

ModuleManager = (function(superClass) {
  extend(ModuleManager, superClass);

  ModuleManager.prototype.__modules = {};

  function ModuleManager(app, options) {
    this.app = app;
    this.options = options != null ? options : {};
    this.app.ApiHero.proxyEvent('ahero-modules-loaded', this);
  }

  ModuleManager.prototype.listModules = function() {
    return _.keys(this.__modules);
  };

  ModuleManager.prototype.getModule = function(name) {
    if (this.__modules.hasOwnProperty(name)) {
      return this.__modules[name];
    } else {
      return null;
    }
  };

  ModuleManager.prototype.saveModules = function(callback) {
    var config, e, error, package_path, pkg;
    package_path = path.join("" + app_root, 'package.json');
    try {
      pkg = require(package_path);
    } catch (error) {
      e = error;
      return callback(e);
    }
    config = pkg.hasOwnProperty('apihero') ? pkg.apihero : {
      apihero: {
        modules: {}
      }
    };
    config = config.hasOwnProperty('modules') ? pkg.apihero.modules : {
      apihero: {
        modules: {}
      }
    };
    _.each(_.difference(this.listModules(), _.keys(config)), (function(_this) {
      return function(name) {
        var mod;
        console.log("getting: " + name);
        mod = {};
        mod[name] = _this.getModuleOptions(name);
        return _.extend(pkg, {
          apihero: {
            modules: mod
          }
        });
      };
    })(this));
    return fs.writeFile(package_path, JSON.stringify(pkg, null, 2), callback);
  };

  ModuleManager.prototype.getModuleConfigs = function() {
    var configs;
    configs = [];
    _.each(_.keys(this.options.modules) || [], (function(_this) {
      return function(key) {
        return configs.push(_this.options.modules[key]);
      };
    })(this));
    console.log('configs:');
    console.log(configs);
    return configs;
  };

  ModuleManager.prototype.getModuleOptions = function(name) {
    if (this.options.modules.hasOwnProperty(name)) {
      return this.options.modules[name];
    } else {
      return null;
    }
  };

  ModuleManager.prototype.load = function(callback) {
    var _modules, done, e, error, init, pkg;
    if (!(callback && typeof callback === 'function')) {
      throw 'callback required';
    }
    this.__modules = {};
    try {
      pkg = require(path.join(app_root || process.cwd(), 'package.json'));
    } catch (error) {
      e = error;
      return callback(e);
    }
    if (!(pkg != null ? pkg.hasOwnProperty('dependencies') : void 0)) {
      return callback('unable to obtain package');
    }
    _modules = _.compact(_.uniq(_.map(_.keys(pkg.dependencies), (function(_this) {
      return function(name) {
        if ((name.match(/^.*\/?apihero\-module\-[a-z0-9\-_]+$/)) != null) {
          return name;
        } else {
          return null;
        }
      };
    })(this))));
    if (!_modules.length) {
      return callback(null, []);
    }
    init = _.after(_modules.length, (function(_this) {
      return function() {
        return _this.emit('ahero-modules-loaded', _this.app.ApiHero.loadedModules = _modules);
      };
    })(this));
    done = _.after(_modules.length, (function(_this) {
      return function() {
        var args;
        args = arguments;
        return _this.saveModules(function() {
          return callback.apply(_this, args);
        });
      };
    })(this));
    _.each(_modules, (function(_this) {
      return function(moduleName) {
        var error1, module;
        try {
          module = require("" + moduleName);
        } catch (error1) {
          e = error1;
          console.log(e);
          return done("unable to load module '" + moduleName + "'");
        }
        if (typeof module === {}) {
          return done("module '" + moduleName + "' is malformed. Is exports defined?");
        }
        if (typeof module.init !== 'function') {
          return done("module '" + moduleName + "' is malformed. Is exports.init defined?");
        }
        return (function(moduleName, module) {
          var error2;
          try {
            return module.init(_this.app, _this.getModuleOptions(moduleName), function(e) {
              _this.__modules[moduleName] = module;
              if (_this.__modules[moduleName].init != null) {
                delete _this.__modules[moduleName].init;
              }
              done.apply(_this, e != null ? [e] : [null]);
              return init();
            });
          } catch (error2) {
            e = error2;
            console.log(e);
            return done(e);
          }
        })(moduleName, module);
      };
    })(this));
    if (!(_modules.length > 0)) {
      return done();
    }
  };

  return ModuleManager;

})(EventEmitter);

module.exports = ModuleManager;
