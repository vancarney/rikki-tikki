// Generated by CoffeeScript 1.9.3
var EventEmitter, ModuleManager, _, fs, path,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

fs = require('fs');

path = require('path');

EventEmitter = require('events').EventEmitter;

ModuleManager = (function(superClass) {
  extend(ModuleManager, superClass);

  function ModuleManager(app, options) {
    this.app = app;
    this.options = options != null ? options : {};
    this.app.ApiHero.proxyEvent('ahero-modules-loaded', this);
  }

  ModuleManager.prototype.getModules = function() {
    return this.__modules;
  };

  ModuleManager.prototype.saveModules = function() {};

  ModuleManager.prototype.getModuleOptions = function(name) {
    var opts;
    if ((opts = this.options.moduleOptions) == null) {
      return null;
    }
    if (opts.hasOwnProperty(name)) {
      return opts[moduleName];
    }
    name = name.replace(/^apihero\-module\-+/, '');
    if (opts.hasOwnProperty(name)) {
      return opts[moduleName];
    } else {
      return null;
    }
  };

  ModuleManager.prototype.load = function(callback) {
    var done, e, init, pkg;
    if (!(callback && typeof callback === 'function')) {
      throw 'callback required';
    }
    try {
      pkg = require(path.join(process.cwd(), 'package.json'));
    } catch (_error) {
      e = _error;
      return callback(e);
    }
    if (!(pkg != null ? pkg.hasOwnProperty('dependencies') : void 0)) {
      return callback('unable to obtain package');
    }
    this.__modules = _.compact(_.uniq(_.map(_.keys(pkg.dependencies), (function(_this) {
      return function(name) {
        if ((name.match(/^apihero\-module\-[a-z0-9\-_]+$/)) != null) {
          return name;
        } else {
          return null;
        }
      };
    })(this))));
    if (!this.__modules.length) {
      return callback(null, []);
    }
    init = _.after(this.__modules.length, (function(_this) {
      return function() {
        console.log('init callback executing');
        _this.app.ApiHero.loadedModules = _this.__modules;
        return _this.emit('ahero-modules-loaded', _this.__modules);
      };
    })(this));
    done = _.after(this.__modules.length, (function(_this) {
      return function() {
        return callback.apply(_this, arguments);
      };
    })(this));
    _.each(this.__modules, (function(_this) {
      return function(moduleName) {
        var module;
        try {
          console.log("requiring module " + moduleName);
          module = require("" + moduleName);
        } catch (_error) {
          e = _error;
          done("unable to load module '" + moduleName + "'");
        }
        if (module === {}) {
          return done("module '" + moduleName + "' is malformed. Is exports defined?");
        }
        if (typeof module.init !== 'function') {
          return done("module '" + moduleName + "' is malformed. Is exports.init defined?");
        }
        try {
          module.init(_this.app, _this.getModuleOptions(moduleName), function(e) {
            console.log('module init callback');
            return done.apply(_this, e != null ? [e] : [null]);
          });
        } catch (_error) {
          e = _error;
          return done(e);
        }
        return init();
      };
    })(this));
    if (!(this.__modules.length > 0)) {
      return done();
    }
  };

  return ModuleManager;

})(EventEmitter);

module.exports = ModuleManager;
