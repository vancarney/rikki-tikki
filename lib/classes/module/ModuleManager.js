// Generated by CoffeeScript 1.9.0
var EventEmitter, ModuleManager, fs, path, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

fs = require('fs');

path = require('path');

EventEmitter = require('events').EventEmitter;

ModuleManager = (function(_super) {
  __extends(ModuleManager, _super);

  function ModuleManager(_at_app) {
    this.app = _at_app;
    this.load((function(_this) {
      return function(e, ok) {
        if (e != null) {
          console.log(e);
          process.exit(1);
        }
        return _this.emit('modules-loaded');
      };
    })(this));
  }

  ModuleManager.prototype.load = function(callback) {
    var pkg_path;
    if (!(callback && typeof callback === 'function')) {
      throw 'callback required';
    }
    pkg_path = "" + (process.cwd()) + path.sep + "package.json";
    return fs.exists(pkg_path, (function(_this) {
      return function(e, ok) {
        var done, modules, pkg;
        if (!ok) {
          return callback(null, false);
        }
        if (!((pkg = require(pkg_path)) && pkg.hasOwnProperty('dependencies'))) {
          return callback('unable to obtain package');
        }
        modules = _.compact(_.uniq(_.map(_.keys(pkg.dependencies), function(name) {
          if ((name.match(/^apihero+\-+module+\-([a-z0-9\-_])$/)) != null) {
            return name;
          } else {
            return null;
          }
        })));
        done = _.after(modules.length, function() {
          return callback(null, true);
        });
        return _.each(modules, function(m) {
          var module;
          try {
            module = require("" + m);
          } catch (_error) {
            e = _error;
            callback("unable to load module " + m);
          }
          if (module === {}) {
            return callback('module malformed. Is exports defined?');
          }
          if (typeof module.init !== 'function') {
            return callback('module malformed. Is exports.init defined?');
          }
          try {
            module.init(_this.app);
          } catch (_error) {
            e = _error;
            return callback(e);
          }
          return done();
        });
      };
    })(this));
  };

  return ModuleManager;

})(EventEmitter);

module.exports = ModuleManager;
