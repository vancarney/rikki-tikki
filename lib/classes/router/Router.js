// Generated by CoffeeScript 1.9.0
var Adapter, ClientRenderer, Fleek, Router, Routes, RoutingParams, Singleton, Util, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

Singleton = require('../base_class/Singleton');

Adapter = require('../request_adapters/Adapter');

Routes = require('./routes');

RoutingParams = require('./RoutingParams');

ClientRenderer = require('../client/ClientRenderer');

Router = (function(_super) {
  __extends(Router, _super);

  function Router() {
    var Fleek, client;
    Fleek = require('../..');
    Adapter = require('../request_adapters/Adapter');
    if ((this.__adapter = new Adapter({
      app: Fleek.getApp()
    })) == null) {
      throw "Routing Adapter not defined.";
    }
    this.__api_path = Fleek.getApp().get('restApiRoot');
    client = new ClientRenderer;
    this.__routes = new Routes(this.__adapter);
    this.intializeRoutes();
    setTimeout(((function(_this) {
      return function() {
        return _this.__client = client.toSource();
      };
    })(this)), 50);
  }

  Router.prototype.getAdapter = function() {
    return this.__adapter;
  };

  Router.prototype.getClient = function() {
    return this.__client;
  };

  Router.prototype.intializeRoutes = function() {
    var Fleek, operation, path, route, _i, _len, _ref, _results;
    Fleek = require('../..');
    Fleek.DEBUG && logger.log('debug', name + ":");
    _ref = ['index', 'show', 'create', 'update', 'destroy'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      operation = _ref[_i];
      switch (operation) {
        case 'show':
          path = this.__api_path + "/:collection/:id";
          break;
        case 'update':
          path = this.__api_path + "/:collection/:id";
          break;
        case 'create':
          path = this.__api_path + "/:collection";
          break;
        case 'destroy':
          path = this.__api_path + "/:collection/:id";
          break;
        case 'index':
          path = this.__api_path + "/:collection";
          break;
        default:
          throw new Error("unrecognized REST operation type: '" + operation + "'");
      }
      this.createRoute(route = new RoutingParams(path, operation));
      _results.push(Fleek.DEBUG && logger.log('debug', (route.method.toUpperCase()) + " " + route.path + " -> " + route.operation));
    }
    return _results;
  };

  Router.prototype.createRoute = function(params) {
    var handler;
    if (!Util.Object.isOfType(params, RoutingParams)) {
      params = new RoutingParams(params.path, params.operation);
    }
    if ((handler = this.__routes.createRoute(params.method, params.path, params.operation)) != null) {
      return this.addRoute(params.path, params.method, handler);
    }
  };

  Router.prototype.addRoute = function(path, method, handler) {
    return this.__adapter.addRoute(path, method, handler);
  };

  return Router;

})(Singleton);

Fleek = require('../..');

module.exports = Router;
