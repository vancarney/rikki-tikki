// Generated by CoffeeScript 1.9.3
var APIOptions, Adapter, ApiHero, ClientRenderer, Router, Routes, RoutingParams, Singleton, Util, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

Singleton = require('../base_class/Singleton');

Adapter = require('../request_adapters/Adapter');

Routes = require('./routes');

RoutingParams = require('./RoutingParams');

ClientRenderer = require('../client/ClientRenderer');

APIOptions = require('../config/APIOptions');

Adapter = require('../request_adapters/Adapter');

Router = (function(superClass) {
  extend(Router, superClass);

  function Router() {
    var ApiHero, client;
    ApiHero = require('../..');
    if ((this.__adapter = new Adapter({
      app: ApiHero.getApp()
    })) == null) {
      throw "Routing Adapter not defined.";
    }
    this.__api_path = this.__adapter.params.app.get('restApiRoot');
    client = new ClientRenderer;
    this.__routes = new Routes(this.__adapter);
    if (APIOptions.get('monitoring_enabled')) {
      this.intializeRoutes();
    }
    setTimeout(((function(_this) {
      return function() {
        return _this.__client = client.toSource();
      };
    })(this)), 50);
  }

  Router.prototype.getAdapter = function() {
    return this.__adapter;
  };

  Router.prototype.getClient = function() {
    return this.__client;
  };

  Router.prototype.intializeRoutes = function() {
    var i, len, operation, ref, results, route;
    ref = ['index', 'create'];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      operation = ref[i];
      this.createRoute(route = new RoutingParams(this.__api_path + "/:collection", operation));
      if (APIOptions.get('debug')) {
        results.push(logger.log('debug', (route.method.toUpperCase()) + " " + route.path + " -> " + route.operation));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Router.prototype.createRoute = function(params) {
    var handler;
    if (!Util.Object.isOfType(params, RoutingParams)) {
      params = new RoutingParams(params.path, params.operation);
    }
    if ((handler = this.__routes.createRoute(params.method, params.path, params.operation)) != null) {
      return this.addRoute(params.path, params.method, handler);
    }
  };

  Router.prototype.addRoute = function(path, method, handler) {
    return this.__adapter.addRoute(path, method, handler);
  };

  return Router;

})(Singleton);

ApiHero = require('../..');

module.exports = Router;
