// Generated by CoffeeScript 1.9.0
var AbstractMonitor, CollectionMonitor, DSManager, DataSourceManager, Fleek, Util, async, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

async = require('async');

Util = require('../utils');

AbstractMonitor = require('../base_class/AbstractMonitor');

DataSourceManager = require('../datasource/DataSourceManager');

CollectionMonitor = (function(_super) {
  __extends(CollectionMonitor, _super);

  CollectionMonitor.prototype.__polling_interval = 10000;

  CollectionMonitor.prototype.__exclude = [/^_+.*$/, /^indexes+$/, /^migrations+$/];

  function CollectionMonitor() {
    CollectionMonitor.__super__.constructor.call(this);
    setTimeout(((function(_this) {
      return function() {
        var _initialized;
        if (!_initialized) {
          _initialized = true;
          return _this.emit('init', {
            '0': {
              'added': _this.getCollection()
            }
          });
        }
      };
    })(this)), 600);
  }

  CollectionMonitor.prototype.refresh = function(callback) {
    var dsm, list;
    if (typeof callback !== 'function') {
      throw 'callback required as arguments[0]';
    }
    if ((dsm = DataSourceManager.getInstance()) == null) {
      return callback('unable to allocate DataSourceManager instance');
    }
    list = [];
    return async.forEachOf(dsm.getDSNames(), ((function(_this) {
      return function(dsName, k, cB) {
        var ds;
        if ((ds = dsm.getDataSource(dsName)) != null) {
          list = _.flatten(list.concat(_.compact(_.map(ds.listCollections(), function(n) {
            var name;
            if (_this.filter((name = n.split('.').pop()))) {
              return {
                name: name,
                dsName: dsName,
                dataSource: ds
              };
            }
          }))));
        }
        return cB();
      };
    })(this)), (function(_this) {
      return function(e) {
        var ex, item, rm, val, _i, _j, _len, _len1, _ref;
        ex = [];
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          val = list[_i];
          if (0 <= _this.getNames().indexOf(val.name)) {
            ex.push(val);
          }
        }
        _ref = (rm = _.difference(_this.getNames(), _.pluck(list, 'name')));
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          item = _ref[_j];
          _this.__collection.removeItemAt(_this.getNames().indexOf(item));
        }
        if ((list = _.difference(list, ex)).length) {
          _this.__collection.setSource(list);
        }
        return callback(_this, e == null ? [null, list] : [e]);
      };
    })(this));
  };

  return CollectionMonitor;

})(AbstractMonitor);

module.exports = CollectionMonitor;

Fleek = require('../..');

DSManager = require('../datasource/DataSourceManager');
