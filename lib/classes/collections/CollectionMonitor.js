// Generated by CoffeeScript 1.10.0
var APIOptions, AbstractMonitor, Collection, CollectionMonitor, DataSourceManager, Util, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

Collection = require('./Collection');

APIOptions = require('../config/APIOptions');

AbstractMonitor = require('../base_class/AbstractMonitor');

CollectionMonitor = (function(superClass) {
  extend(CollectionMonitor, superClass);

  CollectionMonitor.prototype.__polling_interval = 10000;

  CollectionMonitor.prototype.__exclude = [/^_+.*$/, /^indexes+$/, /^migrations+$/];

  function CollectionMonitor() {
    CollectionMonitor.__super__.constructor.call(this);
    if (!APIOptions.get('monitoring_enabled')) {
      return;
    }
    setTimeout(((function(_this) {
      return function() {
        var _initialized;
        if (!_initialized) {
          _initialized = true;
          return _this.emit('init', {
            '0': {
              'added': _this.getCollection()
            }
          });
        }
      };
    })(this)), 600);
  }

  CollectionMonitor.prototype.createCollections = function(dsName, ds, callback) {
    return ds.listCollections((function(_this) {
      return function(e, cols) {
        if (e != null) {
          return callback(e);
        }
        return callback(null, _.compact(_.map(cols, function(n) {
          var name;
          if (_this.filter((name = n.split('.').pop()))) {
            return new Collection({
              name: name,
              dsName: dsName,
              dataSource: ds
            });
          }
        })));
      };
    })(this));
  };

  CollectionMonitor.prototype.refresh = function(callback) {
    var done, ds, dsName, dsm, i, len, list, names, results;
    dsm = DataSourceManager.getInstance();
    names = dsm.getDSNames();
    list = [];
    done = _.after(names.length, (function(_this) {
      return function() {
        var ex, i, item, j, len, len1, ref, rm, val;
        ex = [];
        for (i = 0, len = list.length; i < len; i++) {
          val = list[i];
          if (0 <= _this.getNames().indexOf(val.name)) {
            ex.push(val);
          }
        }
        ref = (rm = _.difference(_this.getNames(), _.map(list, 'name')));
        for (j = 0, len1 = ref.length; j < len1; j++) {
          item = ref[j];
          _this.__collection.removeItemAt(_this.getNames().indexOf(item));
        }
        if ((list = _.difference(list, ex)).length) {
          _this.__collection.setSource(list);
        }
        return callback != null ? callback.apply(_this, typeof e === "undefined" || e === null ? [null, list] : [e]) : void 0;
      };
    })(this));
    results = [];
    for (i = 0, len = names.length; i < len; i++) {
      dsName = names[i];
      if ((ds = dsm.getDataSource(dsName)) != null) {
        results.push(this.createCollections(dsName, ds, (function(_this) {
          return function(e, cols) {
            list = _.flatten(list.concat(cols));
            return done();
          };
        })(this)));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return CollectionMonitor;

})(AbstractMonitor);

DataSourceManager = require('../datasource/DataSourceManager');

module.exports = CollectionMonitor;
