// Generated by CoffeeScript 1.9.0
var AbstractMonitor, CollectionMonitor, DSManager, Fleek, Util, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

AbstractMonitor = require('../base_class/AbstractMonitor');

CollectionMonitor = (function(_super) {
  __extends(CollectionMonitor, _super);

  CollectionMonitor.prototype.__polling_interval = 10000;

  CollectionMonitor.prototype.__exclude = [/^_+.*$/, /^indexes+$/, /^migrations+$/];

  function CollectionMonitor(dsName) {
    if (!(this.__ds = DSManager.getInstance().getDataSource(dsName))) {
      throw 'datasource required';
    }
    CollectionMonitor.__super__.constructor.call(this);
    setTimeout(((function(_this) {
      return function() {
        var _initialized;
        if (!_initialized) {
          _initialized = true;
          return _this.emit('init', {
            '0': {
              'added': _this.getCollection()
            }
          });
        }
      };
    })(this)), 600);
  }

  CollectionMonitor.prototype.refresh = function(callback) {
    var DataSourceManager, dsm;
    DataSourceManager = require('../datasource/DataSourceManager');
    dsm = DataSourceManager.getInstance();
    return _.each(dsm.getDSNames(), (function(_this) {
      return function(dsName) {
        console.log(dsName);
        return dsm.getDataSource(dsName, function(e, conn) {
          return conn.listCollections(function(e, names) {
            var ex, list, rm;
            ex = [];
            if (names != null) {
              list = _.compact(_.map(names, function(v) {
                var n, name;
                if (_this.filter((name = (n = v.name.split('.')).pop()))) {
                  return {
                    name: name,
                    db: n.shift(),
                    options: v.options || {}
                  };
                }
              }));
              _.each(list, function(val, key) {
                if (0 <= _this.getNames().indexOf(val.name)) {
                  return ex.push(val);
                }
              });
              _.each((rm = _.difference(_this.getNames(), _.pluck(list, 'name'))), function(item) {
                return _this.__collection.removeItemAt(_this.getNames().indexOf(item));
              });
              if ((list = _.difference(list, ex)).length) {
                _this.__collection.setSource(list);
              }
            }
            return typeof callback === "function" ? callback(e, list) : void 0;
          });
        });
      };
    })(this));
  };

  return CollectionMonitor;

})(AbstractMonitor);

module.exports = CollectionMonitor;

Fleek = require('../..');

DSManager = require('../datasource/DataSourceManager');
