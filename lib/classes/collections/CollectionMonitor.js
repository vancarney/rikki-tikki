// Generated by CoffeeScript 1.9.0
var AbstractMonitor, CollectionMonitor, DSManager, DataSourceManager, Util, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

AbstractMonitor = require('../base_class/AbstractMonitor');

DataSourceManager = require('../datasource/DataSourceManager');

CollectionMonitor = (function(_super) {
  __extends(CollectionMonitor, _super);

  CollectionMonitor.prototype.__polling_interval = 10000;

  CollectionMonitor.prototype.__exclude = [/^_+.*$/, /^indexes+$/, /^migrations+$/];

  function CollectionMonitor() {
    CollectionMonitor.__super__.constructor.call(this);
    setTimeout(((function(_this) {
      return function() {
        var _initialized;
        if (!_initialized) {
          _initialized = true;
          return _this.emit('init', {
            '0': {
              'added': _this.getCollection()
            }
          });
        }
      };
    })(this)), 600);
  }

  CollectionMonitor.prototype.refresh = function(callback) {
    var ds, dsName, dsm, ex, item, list, rm, val, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    dsm = DataSourceManager.getInstance();
    list = [];
    _ref = dsm.getDSNames();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dsName = _ref[_i];
      if ((ds = dsm.getDataSource(dsName)) != null) {
        list = _.flatten(list.concat(_.compact(_.map(ds.listCollections(), (function(_this) {
          return function(n) {
            var name;
            if (_this.filter((name = n.split('.').pop()))) {
              return {
                name: name,
                dsName: dsName,
                dataSource: ds
              };
            }
          };
        })(this)))));
      }
    }
    ex = [];
    for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
      val = list[_j];
      if (0 <= this.getNames().indexOf(val.name)) {
        ex.push(val);
      }
    }
    _ref1 = (rm = _.difference(this.getNames(), _.pluck(list, 'name')));
    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
      item = _ref1[_k];
      this.__collection.removeItemAt(this.getNames().indexOf(item));
    }
    if ((list = _.difference(list, ex)).length) {
      this.__collection.setSource(list);
    }
    return typeof callback === "function" ? callback(this, typeof e === "undefined" || e === null ? [null, list] : [e]) : void 0;
  };

  return CollectionMonitor;

})(AbstractMonitor);

module.exports = CollectionMonitor;

DSManager = require('../datasource/DataSourceManager');
