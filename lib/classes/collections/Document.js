// Generated by CoffeeScript 1.10.0
var ApiHero, Document, Util, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = {};

Util.String = require('../utils/String');

Util.Object = require('../utils/Object');

Document = (function(superClass) {
  extend(Document, superClass);

  Document.prototype.__data = {};

  function Document(data, opts) {
    if (opts == null) {
      opts = {};
    }
    this.errors = null;
    this.__schema = opts.schema || {
      validators: {}
    };
    if (data) {
      this.setData(data);
    }
  }

  Document.prototype.setData = function(data) {
    _.each(data, (function(_this) {
      return function(v, k) {
        if (typeof v === 'string') {
          return v = Util.String.stripNull(v);
        }
      };
    })(this));
    return this.__data = data;
  };

  Document.prototype.validate = function() {
    var i, k, len, path, ref, v, validator;
    if (process.env !== 'development') {
      for (k in attrs) {
        v = attrs[k];
        if ((path = this.__schema.paths[k]) != null) {
          ref = path.validators || [];
          for (i = 0, len = ref.length; i < len; i++) {
            validator = ref[i];
            if ((validator[0](v)) === false) {
              return validator[1];
            }
          }
        } else {
          if (k !== this.idAttribute) {
            return this.className + " has no attribute '" + k + "'";
          }
        }
      }
    }
  };

  Document.prototype.isValid = function() {
    return this.validate() === void 0;
  };

  Document.prototype.valueOf = function() {
    return this.toJSON();
  };

  Document.prototype.toJSON = function() {
    if (this.isValid()) {
      return this.__data;
    } else {
      return null;
    }
  };

  Document.prototype.serialize = function(maxDepth) {
    var branch, serialize;
    branch = {};
    serialize = (function(_this) {
      return function(doc, parentKey, maxDepth) {
        var key, results, subKey, value;
        results = [];
        for (key in doc) {
          value = doc[key];
          branch[subKey = "" + parentKey + key] = Util.Object.getMongoType(value);
          if ((Util.Object.isHash(value)) && (maxDepth > 0)) {
            results.push(serialize(value, subKey + ".", maxDepth - 1));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
    })(this);
    serialize(this.__data, '', maxDepth);
    return branch;
  };

  return Document;

})(Object);

module.exports = Document;

ApiHero = require('../..');
