// Generated by CoffeeScript 1.9.0
var APIOptions, Collection, CollectionMonitor, DataSourceManager, Document, Util, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

Document = require('./Document');

APIOptions = require('../config/APIOptions');

DataSourceManager = require('../datasource/DataSourceManager');

Collection = (function(_super) {
  __extends(Collection, _super);

  function Collection(ref) {
    if (ref == null) {
      throw "collection reference must be defined";
    }
    _.extend(this, ref);
    this.getCollection = (function(_this) {
      return function(callback) {
        if (!_this.dataSource.connected) {
          return typeof callback === "function" ? callback('Database is not connected', null) : void 0;
        }
        return _this.dataSource.ApiHero.getCollection(_this.name, function() {
          console.log(arguments);
          return callback;
        });
      };
    })(this);
    this;
  }

  Collection.prototype.rename = function(newName, opts, callback) {
    if (typeof opts === 'function') {
      callback = arguments[arguments.length - 1];
      opts = {};
    }
    if (!((newName != null) && typeof newName === 'string')) {
      return callback("new name is required");
    }
    return this.dataSource.ApiHero.renameCollection(this.name, newName, opts || {}, (function(_this) {
      return function(e, ref) {
        var _args;
        _.extend(_this, ref.s);
        _args = arguments;
        return CollectionMonitor.getInstance().refresh(function() {
          return callback.apply(_this, _args);
        });
      };
    })(this));
  };

  Collection.prototype.drop = function(callback) {
    return this.dataSource.ApiHero.dropCollection(this.name, (function(_this) {
      return function() {
        var cm;
        return (cm = CollectionMonitor.getInstance()).refresh(function(e, list) {
          if (e != null) {
            return callback(e);
          }
          if (0 <= _.pluck(cm.getCollection(), 'name').indexOf(_this.name)) {
            if (typeof col !== "undefined" && col !== null) {
              return callback("collection '" + _this.name + "' not dropped");
            }
          }
          return callback(null, true);
        });
      };
    })(this));
  };

  Collection.prototype.getTree = function(callback) {
    return this.dataSource.ApiHero.deriveSchema(callback);
  };

  return Collection;

})(Object);

Collection.create = function(name, json, opts, callback) {
  var ds, dsM, dsName, _cB;
  if (!(arguments.length && typeof arguments[arguments.length - 1] === 'function')) {
    throw 'callback required';
  }
  _cB = arguments[arguments.length - 1];
  if (!((name != null) && typeof name === 'string')) {
    return _cB('name is required');
  }
  callback = (function(_this) {
    return function() {
      var _args;
      _args = arguments;
      return CollectionMonitor.getInstance().refresh(function() {
        return _cB.apply(_this, _args);
      });
    };
  })(this);
  dsM = DataSourceManager.getInstance();
  dsName = (opts != null ? opts.hasOwnProperty('datasource') : void 0) ? opts.datasource : APIOptions.get('default_datasource') || null;
  ds = dsM.getDataSource(dsName);
  if (ds == null) {
    return _cB("datasource '" + ds.name + "' does not exist");
  }
  if (ds.ApiHero == null) {
    return _cB("datasource '" + ds.name + "' is not configured for Api Hero");
  }
  return ds.ApiHero.createCollection(name, json, opts, (function(_this) {
    return function(e, collection) {
      if ((e != null) || !collection) {
        return _cB("unable to create collection " + name, null);
      }
      return callback.apply(_this, arguments);
    };
  })(this));
};

module.exports = Collection;

CollectionMonitor = require('./CollectionMonitor');
