// Generated by CoffeeScript 1.10.0
var APIOptions, Collection, CollectionMonitor, DataSourceManager, Document, Util, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

Document = require('./Document');

APIOptions = require('../config/APIOptions');

Collection = (function(superClass) {
  'use strict';
  extend(Collection, superClass);

  function Collection(ref) {
    if (ref == null) {
      throw "collection reference must be defined";
    }
    _.extend(this, ref);
    this.getCollection = (function(_this) {
      return function(callback) {
        if (typeof arguments[arguments.length - 1] !== 'function') {
          throw 'callback required';
        }
        if (!_this.dataSource.connected) {
          return typeof callback === "function" ? callback('Database is not connected', null) : void 0;
        }
        return _this.dataSource.getCollection(_this.name, callback);
      };
    })(this);
    this;
  }

  Collection.prototype.rename = function(newName, opts, callback) {
    var _cB;
    _cB = arguments[arguments.length - 1];
    if (typeof _cB !== 'function') {
      throw 'callback required';
    }
    callback = (function(_this) {
      return function(e, col) {
        if (e != null) {
          _cB.apply(_this, e);
        }
        _.extend(_this, col.s);
        return _cB.apply(_this, arguments);
      };
    })(this);
    if (typeof opts === 'function') {
      opts = {};
    }
    this.__renamedFrom = this.name;
    this.dataSource.renameCollection(this.name, newName, opts, callback);
    return this.name = newName;
  };

  Collection.prototype.drop = function(callback) {
    return this.dataSource.dropCollection(this.name, callback);
  };

  Collection.prototype.getTree = function(callback) {
    return this.dataSource.deriveSchema(this.name, callback);
  };

  return Collection;

})(Object);

Collection.create = function(name, json, opts, callback) {
  var _cB, ds, dsM, dsName;
  _cB = arguments[arguments.length - 1];
  if (typeof _cB !== 'function') {
    throw 'callback required';
  }
  if (!((name != null) && typeof name === 'string')) {
    return _cB('name is required');
  }
  dsM = DataSourceManager.getInstance();
  dsName = (opts != null ? opts.hasOwnProperty('datasource') : void 0) ? opts.datasource : APIOptions.get('default_datasource') || null;
  ds = dsM.getDataSource(dsName);
  if (ds == null) {
    return _cB("datasource '" + ds.name + "' does not exist");
  }
  if (ds.isApiHeroEnabled() == null) {
    return _cB("datasource '" + ds.name + "' is not configured for Api Hero");
  }
  return ds.createCollection.apply(ds, arguments);
};

module.exports = Collection;

CollectionMonitor = require('./CollectionMonitor');

DataSourceManager = require('../datasource/DataSourceManager');
