// Generated by CoffeeScript 1.9.0
var Collection, CollectionManager, CollectionMonitor, DSManager, Singleton, Util, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

Singleton = require('../base_class/Singleton');

CollectionManager = (function(_super) {
  __extends(CollectionManager, _super);

  CollectionManager.prototype.__cache = {};

  function CollectionManager() {
    this.__ds = DSManager.getInstance();
    this.refresh = (function(_this) {
      return function() {
        return CollectionMonitor.refresh();
      };
    })(this);
  }

  CollectionManager.prototype.createCollection = function(name, ds, json, opts, callback) {
    if (typeof opts === 'function') {
      if (callback == null) {
        callback = opts;
      }
      opts = {};
    }
    return Collection.create(name, ds || this.__ds.getDataSource(), json, opts, (function(_this) {
      return function(e, collection) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        _this.__cache[name] = collection instanceof Collection ? collection : new Collection(name);
        _this.refresh();
        return typeof callback === "function" ? callback(e, collection) : void 0;
      };
    })(this));
  };

  CollectionManager.prototype.dropCollection = function(name, callback) {
    return this.getCollection(name, (function(_this) {
      return function(e, collection) {
        if (e != null) {
          return typeof callback === "function" ? callback(e) : void 0;
        }
        if (collection == null) {
          return typeof callback === "function" ? callback('collection undefined') : void 0;
        }
        return collection.drop(function(e, res) {
          _this.refresh();
          return typeof callback === "function" ? callback(e, collection) : void 0;
        });
      };
    })(this));
  };

  CollectionManager.prototype.listCollections = function(dsNames, callback) {
    var cols, done, ds, name, names, _i, _len;
    if (dsNames == null) {
      dsNames = null;
    }
    if (!((callback != null) && typeof callback === 'function')) {
      throw 'callsback required as argument[1]';
    }
    cols = [];
    if ((dsNames != null) && typeof dsNames === 'string') {
      dsNames = dsNames.split(',');
    }
    names = _.uniq(_.flatten(_.map(dsNames || this.__ds.getDSNames())));
    done = _.after(names.length, (function(_this) {
      return function() {
        return callback(null, _.flatten(cols));
      };
    })(this));
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      if ((ds = this.__ds.getDataSource(name)) == null) {
        return callback("datasource " + name + " is not defined");
      }
      ds.listCollections((function(_this) {
        return function(e, res) {
          cols.splice(cols.length, 0, res);
          return done();
        };
      })(this));
    }
  };

  CollectionManager.prototype.renameCollection = function(oldName, newName, callback) {
    return this.getCollection(oldName, (function(_this) {
      return function(e, collection) {
        return collection.rename(newName, {
          dropTarget: true
        }, function(e, res) {
          _this.refresh();
          return typeof callback === "function" ? callback(e, res) : void 0;
        });
      };
    })(this));
  };

  CollectionManager.prototype.getCollection = function(name, callback) {
    var cm, collection, idx;
    if (((collection = this.__cache[name]) != null) && collection instanceof Collection) {
      return typeof callback === "function" ? callback(null, collection) : void 0;
    } else {
      cm = CollectionMonitor.getInstance();
      if (0 <= (idx = cm.__collection.getItemIndex(name))) {
        return typeof callback === "function" ? callback(null, (this.__cache[name] = new Collection(name)).getCollection()) : void 0;
      }
    }
    return typeof callback === "function" ? callback('collection not found', null) : void 0;
  };

  return CollectionManager;

})(Singleton);

module.exports = CollectionManager;

Collection = require('./Collection');

CollectionMonitor = require('./CollectionMonitor');

DSManager = require('../datasource/DataSourceManager');
