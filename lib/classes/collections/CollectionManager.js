// Generated by CoffeeScript 1.9.0
var APIOptions, Collection, CollectionManager, CollectionMonitor, Singleton, Util, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

Singleton = require('../base_class/Singleton');

APIOptions = require('../config/APIOptions');

Collection = require('./Collection');

CollectionMonitor = require('./CollectionMonitor');

CollectionManager = (function(_super) {
  __extends(CollectionManager, _super);

  function CollectionManager() {
    this.__monitor = CollectionMonitor.getInstance();
  }

  CollectionManager.prototype.createCollection = function(name, json, opts, callback) {
    return Collection.create.apply(this, arguments);
  };

  CollectionManager.prototype.dropCollection = function(name, callback) {
    var _cB;
    if (!(arguments.length && typeof arguments[arguments.length - 1] === 'function')) {
      throw 'callback required';
    }
    _cB = arguments[arguments.length - 1];
    if (!((name != null) && typeof name === 'string')) {
      return _cB('name is required');
    }
    arguments[arguments.length - 1] = (function(_this) {
      return function() {
        var _args;
        _args = arguments;
        return CollectionMonitor.getInstance().refresh(function() {
          return _cB.apply(_this, _args);
        });
      };
    })(this);
    return this.getCollection(name, (function(_this) {
      return function(e, col) {
        if (e != null) {
          return _cB.apply(_this, arguments);
        }
        return col.drop(function(e, c) {
          if (e != null) {
            return callbak(e);
          }
          return _this.__monitor.refresh(function() {
            return callback(e, true);
          });
        });
      };
    })(this));
  };

  CollectionManager.prototype.listCollections = function(dsNames, callback) {
    var list;
    if (!(arguments.length && typeof arguments[arguments.length - 1] === 'function')) {
      throw 'callback required';
    }
    if (typeof dsNames === 'function') {
      callback = arguments[0];
      dsNames = [APIOptions.get('default_datasource')];
    }
    if ((dsNames != null) && typeof dsNames === 'string') {
      dsNames = dsNames.split(',');
    }
    list = _.filter(CollectionMonitor.getInstance().getCollection(), (function(_this) {
      return function(v) {
        return 0 <= dsNames.indexOf(v.dsName);
      };
    })(this));
    return callback(null, list);
  };

  CollectionManager.prototype.renameCollection = function(name, newName, opts, callback) {
    var _cB;
    if (!(arguments.length && typeof arguments[arguments.length - 1] === 'function')) {
      throw 'callback required';
    }
    _cB = arguments[arguments.length - 1];
    if (!((name != null) && typeof name === 'string')) {
      return _cB('name is required');
    }
    if (typeof opts === 'function') {
      opts = {};
    }
    callback = (function(_this) {
      return function() {
        var _args;
        _args = arguments;
        return CollectionMonitor.getInstance().refresh(function() {
          return _cB.apply(_this, _args);
        });
      };
    })(this);
    return this.getCollection(name, (function(_this) {
      return function(e, col) {
        return col.rename(newName, opts || {}, function(e, res) {
          if (e != null) {
            return _cB.apply(_this, arguments);
          }
          return callback.apply(_this, arguments);
        });
      };
    })(this));
  };

  CollectionManager.prototype.getCollection = function(name, callback) {
    var col;
    if (!((callback != null) && typeof callback === 'function')) {
      throw "callback required";
    }
    if ((col = _.where(this.__monitor.getCollection(), {
      name: name
    })).length) {
      return callback(null, col[0]);
    }
    return callback('collection not found');
  };

  return CollectionManager;

})(Singleton);

module.exports = CollectionManager;
