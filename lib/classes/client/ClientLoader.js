// Generated by CoffeeScript 1.7.1
var ClientLoader, RikkiTikkiAPI, Util, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI || module.parent.exports;

Util = RikkiTikkiAPI.Util;

ClientLoader = (function(_super) {
  __extends(ClientLoader, _super);

  ClientLoader.prototype.__data = {};

  function ClientLoader() {
    var _path;
    _path = (Util.getModulePath('rikki-tikki-client')).replace(/index\.js/, 'lib/rikki-tikki-client.js');
    ClientLoader.__super__.constructor.call(this, _path);
  }

  ClientLoader.prototype.load = function(callback) {
    var e;
    try {
      return Util.File.readFile(this.__path, 'utf-8', (function(_this) {
        return function(e, data) {
          return typeof callback === "function" ? callback(e, _this.__data = data) : void 0;
        };
      })(this));
    } catch (_error) {
      e = _error;
      return typeof callback === "function" ? callback("could not load file '" + this.__path + "\n" + e, null) : void 0;
    }
  };

  ClientLoader.prototype.save = function(callback) {
    return typeof callback === "function" ? callback(new Error('Save is not allowed', null)) : void 0;
  };

  return ClientLoader;

})(RikkiTikkiAPI.base_classes.AbstractLoader);

module.exports = ClientLoader;
