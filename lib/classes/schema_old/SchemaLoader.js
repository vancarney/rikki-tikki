// Generated by CoffeeScript 1.10.0
var APIOptions, AbstractLoader, Schema, SchemaLoader, Util, _, path,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

path = require('path');

Util = require('../utils');

APIOptions = require('../config/APIOptions');

AbstractLoader = require('../base_class/AbstractLoader');

SchemaLoader = (function(superClass) {
  extend(SchemaLoader, superClass);

  SchemaLoader.prototype.__data = {};

  function SchemaLoader(name1) {
    var _path, e, error;
    this.name = name1;
    _path = this.name ? SchemaLoader.createPath(this.name) : null;
    try {
      SchemaLoader.__super__.constructor.call(this, _path);
    } catch (error) {
      e = error;
      this.emit.apply(this, ['error', e]);
    }
  }

  SchemaLoader.prototype.set = function(tree, opts, callback) {
    if (typeof opts === 'function') {
      callback = arguments[1];
      opts = {};
    }
    _.extend(this.__data, tree);
    return this.save(callback);
  };

  SchemaLoader.prototype.unset = function(attr, callback) {
    if (this.__data.hasOwnProperty(attr)) {
      delete this.__data[attr];
    }
    return this.save(callback);
  };

  SchemaLoader.prototype.load = function(_path, callback) {
    if (typeof _path === 'function') {
      callback = arguments[0];
      _path = null;
    } else {
      if (this.__path == null) {
        this.__path = _path;
      }
    }
    if (this.pathExists(this.__path)) {
      return SchemaLoader.__super__.load.call(this, (function(_this) {
        return function(e) {
          if (e != null) {
            return typeof callback === "function" ? callback(e) : void 0;
          }
          return typeof callback === "function" ? callback(null, _this.__data) : void 0;
        };
      })(this));
    } else {
      this.__data = {};
      return typeof callback === "function" ? callback(null, this.__data) : void 0;
    }
  };

  SchemaLoader.prototype.reload = function(callback) {
    console.log('SchemaLoader.reload');
    delete require.cache[this.__path];
    return this.load(this.__path, callback);
  };

  SchemaLoader.prototype.create = function(name1, tree, callback) {
    this.name = name1;
    if (tree == null) {
      tree = {};
    }
    if (this.name == null) {
      return typeof callback === "function" ? callback("Name is required", null) : void 0;
    }
    this.__path = SchemaLoader.createPath(this.name);
    return this.save(callback);
  };

  SchemaLoader.prototype.rename = function(newName, callback) {
    console.log(SchemaLoader.createPath(this.name = newName));
    return SchemaLoader.__super__.rename.call(this, SchemaLoader.createPath(this.name = newName), (function(_this) {
      return function(e, s) {
        return typeof callback === "function" ? callback((e != null ? "Could not rename Schema " + _this.name + "\r\t" + e : null), s) : void 0;
      };
    })(this));
  };

  SchemaLoader.prototype.destroy = function(callback) {
    if (!APIOptions.get('destructive')) {
      return this.rename("_" + this.name, (function(_this) {
        return function(e, s) {
          return typeof callback === "function" ? callback((e != null ? "Schema.destroy failed\r\t" + e : null), s) : void 0;
        };
      })(this));
    } else {
      return SchemaLoader.__super__.destroy.call(this, (function(_this) {
        return function(e, s) {
          return typeof callback === "function" ? callback((e != null ? "Schema.destroy failed\r\t" + e : null), s) : void 0;
        };
      })(this));
    }
  };

  SchemaLoader.prototype.save = function(callback) {
    var ApiHero, model;
    if (this.__path == null) {
      return typeof callback === "function" ? callback("path was not defined") : void 0;
    }
    ApiHero = require('../..');
    model = ApiHero.model(this.name, new Schema(this.__data));
    return Util.File.writeFile(this.__path, model.toAPISchema().toSource(), null, callback);
  };

  return SchemaLoader;

})(AbstractLoader);

SchemaLoader.createPath = function(name) {
  return "" + (APIOptions.get('schema_path')) + path.sep + name + ".js";
};

module.exports = SchemaLoader;

Schema = require('./Schema');
