// Generated by CoffeeScript 1.10.0
var APIOptions, Schema, SchemaRoller, Util, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

APIOptions = require('../config/APIOptions');

SchemaRoller = require('schemaroller');

Schema = (function(superClass) {
  extend(Schema, superClass);

  Schema.prototype.virtual = function(name, options) {
    return this.virtuals[name] = name.split('.').reduce((function(mem, part, i, arr) {
      return mem[part] || (mem[part] = i === arr.length - 1 ? new ApiHero.VirtualType(options, name) : {});
    }), this.tree);
  };

  Schema.prototype.virtualpath = function(name) {
    return this.virtuals[name];
  };

  function Schema() {
    var _s;
    Schema.__super__.constructor.call(this, _s = require('./loopback.json'));
  }

  Schema.prototype.setOption = function(name, value) {
    var _o;
    if ((_o = this.get('options')) == null) {
      return false;
    }
    return _o.set(name, value);
  };

  Schema.prototype.getOption = function(name) {
    var _o;
    if ((_o = this.get('options')) == null) {
      return false;
    }
    return _o.get(name);
  };

  Schema.prototype.setProperty = function(name, value) {
    var _o;
    if ((_o = this.get('properties')) == null) {
      return false;
    }
    return _o.set(name, value);
  };

  Schema.prototype.getProperty = function(name) {
    var _o;
    if ((_o = this.get('properties')) == null) {
      return false;
    }
    return _o.get(name);
  };

  Schema.prototype.setRelation = function(name, value) {
    var _o;
    if ((_o = this.get('relations')) == null) {
      return false;
    }
    return _o.set(name, value);
  };

  Schema.prototype.getRelation = function(name) {
    var _o;
    if ((_o = this.get('relations')) == null) {
      return false;
    }
    return _o.get(name);
  };

  Schema.prototype.toModel = function(name) {
    return ApiHero.model(name, this);
  };

  Schema.prototype.toJSON = function() {
    return _.clone(this);
  };

  Schema.prototype.toString = function(spacer) {
    return JSON.stringify(this, Schema.replacer, spacer);
  };

  Schema.prototype.toSource = function(pretty) {
    var ns, ref, ref1, schema;
    if (pretty == null) {
      pretty = false;
    }
    ns = (ns = (ref = APIOptions.get('api_namespace')) != null ? ref.concat('.') : void 0) !== '.' ? ns : '';
    schema = this.toString((pretty ? 2 : null));
    delete schema.name;
    return _.template(this.__template)({
      name: Util.String.capitalize(this.name),
      schema: schema,
      ns: ns,
      api_path: (ref1 = APIOptions.get('schema_api_require_path')) != null ? ref1 : ""
    });
  };

  return Schema;

})(SchemaRoller.Schema);

Schema.prototype.__template = "name: <%=name%>\nschema: <%=schema%>\nns: <%=ns%>\napi_path: <%=api_path%>";

Schema.replacer = function(key, value) {
  if ((value != null) && (0 > _.keys(Schema.reserved).indexOf(key))) {
    return Util.Function.toString(value);
  } else {
    return void 0;
  }
};

Schema.nativeTypes = ['Array', 'Boolean', 'Buffer', 'Date', 'null', 'Number', 'Object', 'String'];

Schema.virtualTypes = ['any', 'GeoPoint', 'Vector'];

Schema.reserved = _.zipObject(_.map("on,db,set,get,init,isNew,errors,schema,options,modelName,__template,virtual,collection,toObject,toJSON,toModel,toString,toSource,constructor,emit,_events,_pres,_posts".split(','), function(v) {
  return [v, 1];
}));

Schema.replacer = function(key, value) {
  if ((value != null ? value.toClientSchema : void 0) != null) {
    value = value.toClientSchema();
  }
  if ((value != null) && (0 > _.keys(this.reserved).indexOf(key))) {
    return Util.Function.toString(value);
  } else {
    return void 0;
  }
};

Schema.reviver = function(key, value) {
  var fun;
  if (0 <= _.keys(this.reserved).indexOf(key)) {
    return void 0;
  }
  if (typeof value === 'string' && ((fun = Util.Function.fromString(value)) != null)) {
    return fun;
  } else {
    return value;
  }
};

module.exports = Schema;
