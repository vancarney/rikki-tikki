// Generated by CoffeeScript 1.10.0
var EventEmitter, Singleton, SyncService, Util, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

EventEmitter = require('events').EventEmitter;

Singleton = require('../base_class/Singleton');

SyncService = (function(superClass) {
  extend(SyncService, superClass);

  function SyncService() {
    var __changeHandler, __syncItems, __typeDelegates;
    __syncItems = {};
    __typeDelegates = {};
    __changeHandler = (function(_this) {
      return function(ops) {
        return _.each(ops, function(op) {
          return __typeDelegates[op.kind].emit(op.operation, op.data);
        });
      };
    })(this);
    this.registerSyncInstance = (function(_this) {
      return function(kind, item) {
        if (_this.hasKind(kind)) {
          return;
        }
        __typeDelegates[kind] = new EventEmitter;
        __typeDelegates[kind].off = function(event, listener) {
          return __typeDelegates[kind].removeListener(event, listener);
        };
        (__syncItems[kind] = item).on('changed', __changeHandler);
        return _this;
      };
    })(this);
    this.removeSyncInstance = (function(_this) {
      return function(kind) {
        if (!_this.hasKind(kind)) {
          return;
        }
        __syncItems[kind].off('changed', __changeHandler);
        delete __syncItems[kind];
        __typeDelegates[kind].removeAllListeners();
        return _this;
      };
    })(this);
    this.addSyncHandler = (function(_this) {
      return function(kind, type, handler) {
        var ref;
        if ((ref = __typeDelegates[kind]) != null) {
          ref.on(type, handler);
        }
        return _this;
      };
    })(this);
    this.removeSyncHandler = (function(_this) {
      return function(kind, type, handler) {
        var ref;
        if ((ref = __typeDelegates[kind]) != null) {
          ref.off(type, handler);
        }
        return _this;
      };
    })(this);
    this.listSyncKinds = (function(_this) {
      return function() {
        return _.keys(__syncItems);
      };
    })(this);
    this.hasKind = (function(_this) {
      return function(kind) {
        return 0 <= _this.listSyncKinds().indexOf(kind);
      };
    })(this);
  }

  return SyncService;

})(Singleton);

module.exports = SyncService;

module.exports.SyncInstance = require('./SyncInstance');

module.exports.SyncOperation = require('./SyncOperation');
