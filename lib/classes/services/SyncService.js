// Generated by CoffeeScript 1.7.1
var RikkiTikkiAPI, SchemaTreeManager, SyncService, Util, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports;

Util = RikkiTikkiAPI.Util;

module.exports.RikkiTikkiAPI = RikkiTikkiAPI;

SchemaTreeManager = require('../schema_tree/SchemaTreeManager');

SyncService = (function(_super) {
  __extends(SyncService, _super);

  function SyncService() {
    RikkiTikkiAPI.getCollectionMonitor().on('changed', (function(_this) {
      return function(data) {
        return _.each(_.keys(data), function(operation) {
          return _.each(data[operation], function(collection) {
            return _this["collection" + (Util.String.capitalize(operation))](collection.name);
          });
        });
      };
    })(this));
  }

  SyncService.prototype.collectionAdded = function(name) {
    return RikkiTikkiAPI.getCollectionManager().getCollection(name, (function(_this) {
      return function(e, col) {
        if (e != null) {
          return console.log(e);
        }
        return col.getTree(function(e, tree) {
          return SchemaTreeManager.getInstance().createTree(name, tree, function(e) {
            if (e != null) {
              return console.log("could not create SchemaTree file for '" + name + "'\n\t" + e);
            }
            return RikkiTikkiAPI.getSchemaManager().createSchema(name, function(e) {
              if (e != null) {
                return console.log("could not create Schema JS file for '" + name + "'\n\t" + e);
              }
            });
          });
        });
      };
    })(this));
  };

  SyncService.prototype.collectionRemoved = function(name) {
    "removed collection: " + name;
    SchemaTreeManager.getInstance().destroyTree(name, (function(_this) {
      return function(e, done) {
        if (e != null) {
          return console.log("could not destroy SchemaTree file for '" + name + "'\n\t" + e);
        }
      };
    })(this));
    return RikkiTikkiAPI.getSchemaManager().destroySchema(name, (function(_this) {
      return function(e) {
        if (e != null) {
          return console.log("could not destroy Schema JS file for '" + name + "'\n\t" + e);
        }
      };
    })(this));
  };

  SyncService.prototype.schemaAdded = function(name) {
    SchemaTreeManager.getInstance().createTree(name, tree, (function(_this) {
      return function(e) {
        if (e != null) {
          return console.log("could not create SchemaTree file for '" + name + "'\n\t" + e);
        }
      };
    })(this));
    return RikkiTikkiAPI.getCollectionManager().createCollection(name, (function(_this) {
      return function(e) {
        if (e != null) {
          return console.log("could not create Collection '" + name + "'\n\t" + e);
        }
      };
    })(this));
  };

  SyncService.prototype.schemaRemoved = function(name) {
    SchemaTreeManager.getInstance().destroyTree(name, (function(_this) {
      return function(e) {
        if (e != null) {
          return console.log("could not destroy SchemaTree file for '" + name + "'\n\t" + e);
        }
      };
    })(this));
    return RikkiTikkiAPI.getCollectionManager().destroyCollection(name, (function(_this) {
      return function(e) {
        if (e != null) {
          return console.log("could not destroy Collection '" + name + "'\n\t" + e);
        }
      };
    })(this));
  };

  return SyncService;

})(RikkiTikkiAPI.base_classes.Singleton);

module.exports = SyncService;
