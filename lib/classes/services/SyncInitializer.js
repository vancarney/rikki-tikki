// Generated by CoffeeScript 1.9.3
var APIOptions, CollectionManager, CollectionMonitor, DataSourceManager, SchemaManager, SchemaMonitor, SchemaTreeManager;

DataSourceManager = require('../datasource/DataSourceManager');

CollectionManager = require('../collections/CollectionManager');

CollectionMonitor = require('../collections/CollectionMonitor');

SchemaManager = require('../schema/SchemaManager');

SchemaMonitor = require('../schema/SchemaMonitor');

SchemaTreeManager = require('../schema_tree/SchemaTreeManager');

APIOptions = require('../config/APIOptions');

module.exports.init = function(ApiHero) {
  if (!APIOptions.get('monitoring_enabled')) {
    return;
  }
  ApiHero.createSyncInstance('schema', SchemaMonitor).addSyncHandler('schema', 'added', (function(_this) {
    return function(op) {
      var tree;
      tree = {};
      return CollectionManager.getInstance().createCollection(op.name, function(e, collection) {
        if (e != null) {
          return logger.log("could not create Collection '" + op.name + "'\n\t" + e);
        }
        return collection.getTree(function(e, tree) {
          return SchemaTreeManager.getInstance().createTree(op.name, tree, function(e) {
            if (e != null) {
              return logger.log("could not create SchemaTree file for '" + op.name + "'\n\t" + e);
            }
          });
        });
      });
    };
  })(this)).addSyncHandler('schema', 'replaced', (function(_this) {
    return function(op) {
      console.log('schema replaced');
      return SchemaManager.getInstance().reloadSchema(op.data.name);
    };
  })(this)).addSyncHandler('schema', 'removed', (function(_this) {
    return function(op) {
      console.log(op);
      return SchemaTreeManager.getInstance().destroyTree(op.data.name, function(e) {
        if (e != null) {
          logger.log("could not destroy SchemaTree file for '" + name + "'\n\t" + e);
        }
        return CollectionManager.getInstance().dropCollection(op.data.name, function(e) {
          if (e != null) {
            return logger.log("could not destroy Collection '" + name + "'\n\t" + e);
          }
        });
      });
    };
  })(this));
  return ApiHero.createSyncInstance('collection', CollectionMonitor).addSyncHandler('collection', 'added', (function(_this) {
    return function(collection) {
      return SchemaManager.getInstance().createSchema(collection.name, function(e) {
        if (e != null) {
          return logger.log("could not create Schema JS file for '" + collection.name + "'\n\t" + e);
        }
      });
    };
  })(this)).addSyncHandler('collection', 'replaced', (function(_this) {
    return function(collection) {
      console.log('collection replaced');
      return console.log(arguments);
    };
  })(this)).addSyncHandler('collection', 'removed', (function(_this) {
    return function(collection) {
      return SchemaManager.getInstance().destroySchema(collection.name, function(e) {
        if (e != null) {
          logger.log("could not destroy Schema JS file for '" + collection.name + "'\n\t" + e);
        }
        return;
        return SchemaTreeManager.destroyTree(name, function(e) {
          if (e != null) {
            return logger.log("could not destroy SchemaTree file for '" + collection.name + "'\n\t" + e);
          }
        });
      });
    };
  })(this));
};
