// Generated by CoffeeScript 1.7.1
var AuthConfig, AuthConfigManager, OAuthStrategy, RikkiTikkiAPI, Util, fs, passport, path, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI || module.parent.exports;

module.exports.RikkiTikkiAPI = RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

fs = require('fs');

path = require('path');

_ = require('underscore')._;

AuthConfig = require('./AuthConfigLoader');

passport = require('passport');

OAuthStrategy = require('passport-oauth').OAuthStrategy;

AuthConfigManager = (function(_super) {
  __extends(AuthConfigManager, _super);

  AuthConfigManager.prototype.__configs = {};

  function AuthConfigManager() {
    passport.serializeUser((function(_this) {
      return function(user, done) {
        return done(null, user);
      };
    })(this));
    passport.deserializeUser((function(_this) {
      return function(user, done) {
        return done(null, user);
      };
    })(this));
    this.__path = "" + (RikkiTikkiAPI.getOptions().auth_config_path);
    this.load();
  }

  AuthConfigManager.prototype.load = function(callback) {
    var e, errors, file, n, stat, _i, _len, _ref;
    try {
      stat = fs.statSync(this.__path);
    } catch (_error) {
      e = _error;
      throw new Error(e);
    }
    if (stat != null ? stat.isDirectory() : void 0) {
      errors = [];
      _ref = fs.readdirSync(this.__path);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        if (file.match(/^(_|\.)+/)) {
          continue;
        }
        (this.__configs != null ? this.__configs : this.__configs = {})[n = Util.File.name(file)] = new AuthConfig(path.normalize("" + this.__path + path.sep + file));
        this.__configs[n].load((function(_this) {
          return function(e, s) {
            if (e != null) {
              return errors.push(e);
            }
            passport.use(new OAuthStrategy(s, function(accessToken, refreshToken, profile, done) {
              console.log(arguments);
              return done(null, profile);
            }));
            console.log(passport);
            RikkiTikkiAPI.getAdapter().params.app.get("/auth/twitter", passport.authenticate('oauth'));
            return RikkiTikkiAPI.getAdapter().params.app.get("/auth/twitter/callback", passport.authenticate('oauth'), function(req, res) {
              return console.log("callback handler");
            });
          };
        })(this));
      }
      return callback != null ? callback.apply(this, errors.length ? [errors, null] : [null, true]) : void 0;
    }
  };

  return AuthConfigManager;

})(RikkiTikkiAPI.base_classes.Singleton);

AuthConfigManager.getInstance = function() {
  return this.__instance != null ? this.__instance : this.__instance = new AuthConfigManager;
};

module.exports = AuthConfigManager;
