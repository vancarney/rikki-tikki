// Generated by CoffeeScript 1.10.0
var APIOptions, SchemaTree, SchemaTreeManager, Singleton, _, fs, path,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

fs = require('fs');

path = require('path');

Singleton = require('../base_class/Singleton');

SchemaTree = require('./SchemaTree');

APIOptions = require('../config/APIOptions');

SchemaTreeManager = (function(superClass) {
  extend(SchemaTreeManager, superClass);

  function SchemaTreeManager() {
    this.__trees = {};
    this.__path = APIOptions.get('trees_path');
    if (!fs.existsSync(this.__path)) {
      fs.mkdirSync(this.__path);
    }
    (this.load = (function(_this) {
      return function() {
        var e, error, file, i, len, ref, results, stat;
        try {
          stat = fs.statSync(_this.__path);
        } catch (error) {
          e = error;
          throw new Error(e);
          return false;
        }
        if (stat != null ? stat.isDirectory() : void 0) {
          ref = fs.readdirSync(_this.__path);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            file = ref[i];
            results.push(_this.__trees[file.split('.').shift()] = new SchemaTree("" + (fs.realpathSync(_this.__path)) + path.sep + file));
          }
          return results;
        }
      };
    })(this))();
  }

  SchemaTreeManager.prototype.createTree = function(name, data, callback) {
    if (data == null) {
      data = {};
    }
    if (!this.__trees[name]) {
      return (this.__trees[name] = new SchemaTree).create("" + this.__path + path.sep + name + ".json", data, callback);
    } else {
      return typeof callback === "function" ? callback(new Error("SchemaTree '" + name + "' already exists")) : void 0;
    }
  };

  SchemaTreeManager.prototype.destroyTree = function(name, callback) {
    var tree;
    if ((tree = this.__trees[name]) != null) {
      return tree.destroy(callback);
    }
  };

  SchemaTreeManager.prototype.getTree = function(name, callback) {
    var tree;
    return typeof callback === "function" ? callback(null, (tree = this.__trees[name]) != null ? tree : null) : void 0;
  };

  SchemaTreeManager.prototype.listTrees = function(callback) {
    return typeof callback === "function" ? callback(null, _.keys(this.__trees)) : void 0;
  };

  SchemaTreeManager.prototype.saveTree = function(name, callback) {
    var tree;
    if ((tree = this.__trees[name]) != null) {
      return tree.save(callback);
    }
  };

  SchemaTreeManager.prototype.saveAll = function(callback) {
    var eOut;
    eOut = [];
    return _.each(this.__trees, function(v, k) {
      return v.save((function(_this) {
        return function(e) {
          if (e) {
            return eOut.push(e);
          }
        };
      })(this));
    });
  };

  if (typeof callback === "function") {
    callback(eOut.length ? eOut : null);
  }

  return SchemaTreeManager;

})(Singleton);

module.exports = SchemaTreeManager;
