// Generated by CoffeeScript 1.9.0
var APIOptions, DSManager, DataSource, Singleton, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Singleton = require('../base_class/Singleton');

APIOptions = require('../config/APIOptions');

DataSource = require('./DataSource');

DSManager = (function(_super) {
  __extends(DSManager, _super);

  DSManager.prototype.__ds = {};

  function DSManager() {}

  DSManager.prototype.getDataSource = function(name) {
    if (!((name != null) || 0 <= _.keys(this.__ds).indexOf(name))) {
      name = APIOptions.get('default_datasource');
    }
    return this.__ds[name] || null;
  };

  DSManager.prototype.getDSNames = function() {
    return _.keys(this.__ds);
  };

  DSManager.prototype.initialize = function(callback) {
    var ApiHero, datasources, done, ds, dsName, names, _i, _len;
    if (typeof arguments[0] !== 'function') {
      throw 'callback required as arguments[0]';
    }
    ApiHero = require('../..');
    datasources = ApiHero.getApp().datasources;
    names = _.uniq(_.compact(_.map(_.keys(datasources), function(key) {
      return key.toLowerCase();
    })));
    done = _.after(names.length, (function(_this) {
      return function() {
        return callback(null, 'ok');
      };
    })(this));
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      dsName = names[_i];
      if ((ds = this.__ds[dsName]) == null) {
        ds = this.__ds[dsName] = new DataSource(datasources[dsName].name, {});
      }
      if (ds == null) {
        return callback("unable to allocate datasrouce " + dsName);
      }
      if (ds.connected || ds.connecting) {
        process.nextTick(done);
      }
      ds.connect((function(_this) {
        return function(e, db) {
          if (e != null) {
            return callback(e);
          }
          return done();
        };
      })(this));
    }
  };

  return DSManager;

})(Singleton);

module.exports = DSManager;
