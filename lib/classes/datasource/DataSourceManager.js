// Generated by CoffeeScript 1.10.0
var APIOptions, DSManager, Singleton, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Singleton = require('../base_class/Singleton');

APIOptions = require('../config/APIOptions');

DSManager = (function(superClass) {
  extend(DSManager, superClass);

  function DSManager() {
    return DSManager.__super__.constructor.apply(this, arguments);
  }

  DSManager.prototype.__ds = {};

  DSManager.prototype.getDataSource = function(name) {
    if (!((name != null) || 0 <= _.keys(this.__ds).indexOf(name))) {
      name = APIOptions.get('default_datasource');
    }
    return this.__ds[name] || null;
  };

  DSManager.prototype.getDSNames = function() {
    return _.keys(this.__ds);
  };

  DSManager.prototype.initialize = function(callback) {
    var ApiHero, DataSource, datasources, done, ds, dsName, i, len, names, ref, ref1, ref2;
    if (typeof arguments[0] !== 'function') {
      throw 'callback required as arguments[0]';
    }
    ApiHero = require('../..');
    datasources = ApiHero.getApp().datasources;
    names = _.uniq(_.compact(_.map(_.keys(datasources), function(key) {
      return key.toLowerCase();
    })));
    done = _.after(names.length, (function(_this) {
      return function() {
        return callback(null, 'ok');
      };
    })(this));
    for (i = 0, len = names.length; i < len; i++) {
      dsName = names[i];
      if (datasources[dsName].connector !== 'memory' && typeof ((ref = datasources[dsName].settings) != null ? ref.connector.match : void 0) !== 'function') {
        done();
        continue;
      }
      if ((ref1 = datasources[dsName].settings) != null ? ref1.connector.hasOwnProperty('mailer') : void 0) {
        done();
        continue;
      }
      if ((ref2 = datasources[dsName].settings) != null ? ref2.connector.match(/^loopback\-component\-storage/) : void 0) {
        done();
        continue;
      }
      if ((ds = this.__ds[dsName]) == null) {
        DataSource = require('./DataSource');
        ds = this.__ds[dsName] = new DataSource(datasources[dsName].name, datasources[dsName]);
        if (ds == null) {
          return callback("unable to allocate datasource " + dsName);
        }
      }
      if (ds.connected || ds.connecting) {
        process.nextTick(done);
      }
      ds.connect((function(_this) {
        return function(e, db) {
          if (e != null) {
            return callback(e);
          }
          return done();
        };
      })(this));
    }
    return this;
  };

  return DSManager;

})(Singleton);

module.exports = DSManager;
