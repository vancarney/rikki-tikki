// Generated by CoffeeScript 1.9.0
var APIOptions, CollectionManager, DataSource, EventEmitter, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

EventEmitter = require('events').EventEmitter;

APIOptions = require('../config/APIOptions');

CollectionManager = require('../collections/CollectionManager');

DataSource = (function(_super) {
  __extends(DataSource, _super);

  function DataSource(name, ds) {
    _.extend(this, ds);
    this.sourceName = name;
    if (typeof ds.buildModelFromInstance === 'function') {
      this.canBuildModelFromInstance = function() {
        return true;
      };
      this.buildModelFromInstance = ds.buildModelFromInstance;
    }
    this.isRelational = function() {
      return this.connector.relational || false;
    };
    this.isNoSQL = function() {
      return this.connector.nosql || ((this.name.match(/^(mongodb|Memory)+$/)) != null) || false;
    };
    this.connected = function() {
      return this.connector.connected;
    };
    this.connect = function(callback) {
      console.log('connect');
      if (typeof arguments[0] !== 'function') {
        throw 'callback required as arguments[0]';
      }
      if (!this.connected()) {
        return this.connector.connect.apply(this, arguments);
      }
    };
  }

  DataSource.prototype.buildModelFromInstance = function(name, json, options) {
    throw 'dynamic collection creation not supported by this adapter';
  };

  DataSource.prototype.canBuildModelFromInstance = function() {
    return false;
  };

  DataSource.prototype.getDAO = function() {
    this.connector.dataSource.DataAccessObject;
    return typeof callback === "function" ? callback("unable to connect to DataSource: " + this.sourceName, this) : void 0;
  };

  DataSource.prototype.listModels = function() {
    var builtins, l;
    builtins = ['Model', 'PersistedModel', 'Email', 'Application', 'AnonymousModel_0', 'AnonymousModel_1', 'AnonymousModel_2', 'AnonymousModel_3', 'AnonymousModel_4', 'AnonymousModel_5', 'AccessToken', 'RoleMapping', 'Role', 'ACL', 'Scope', 'User', 'Change', 'Checkpoint'];
    l = _.filter(this.models, (function(_this) {
      return function(model, name) {
        var _ref;
        return (0 > builtins.indexOf(name)) && (model !== void 0) && (((_ref = model.getDataSource()) != null ? _ref.settings.name : void 0) === _this.sourceName);
      };
    })(this));
    return _.compact(_.map(l, function(m) {
      return m.definition.name;
    }));
  };

  DataSource.prototype.listCollections = function() {
    return [];
  };

  DataSource.prototype.createCollection = function(name, json, opts) {
    return this.createModel.apply(this, arguments);
  };

  DataSource.prototype.buildCollection = function(name, json, opts) {
    var callback, o;
    if (typeof opts === 'function') {
      callback = arguments[2];
      opts = {};
    }
    this.modelBuilder.on('initialize', (function(_this) {
      return function() {
        return console.log('initialized model');
      };
    })(this));
    if (!this.canBuildModelFromInstance()) {
      throw "cannot create collections on SQL connection";
    }
    if (typeof (o = this.buildModelFromInstance.apply(this, arguments)) !== 'function') {
      throw 'could not create model';
    }
    return o;
  };

  DataSource.prototype.getCollection = function(name) {
    return console.log(this.models);
  };

  DataSource.prototype.removeCollection = function(name) {};

  return DataSource;

})(EventEmitter);

DataSource.getDataSource = (function(_this) {
  return function(name) {
    var DataSourceManager;
    DataSourceManager = require('./DataSourceManager');
    return DataSourceManager.getInstance().getDataSource(name);
  };
})(this);

module.exports = DataSource;
