// Generated by CoffeeScript 1.9.0
var APIOptions, BuiltIns, CollectionManager, CollectionMonitor, DataSource, DataSourceWrapper, EventEmitter, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

EventEmitter = require('events').EventEmitter;

DataSource = require('loopback-datasource-juggler').DataSource;

BuiltIns = require('../types').BuiltIns;

APIOptions = require('../config/APIOptions');

DataSourceWrapper = (function(_super) {
  __extends(DataSourceWrapper, _super);

  function DataSourceWrapper(NameOrDS, options) {
    DataSourceWrapper.__super__.constructor.call(this, NameOrDS, options);
    _.extend(this, EventEmitter);
    this.canBuildModelFromInstance = (function(_this) {
      return function() {
        return typeof _this.buildModelFromInstance === 'function';
      };
    })(this);
    this.isRelational = function() {
      return this.connector.relational || false;
    };
    this.isNoSQL = function() {
      return this.connector.nosql || ((this.name.match(/^(mongodb|Memory)+$/)) != null) || false;
    };
  }

  DataSourceWrapper.prototype.isApiHeroEnabled = function() {
    return this.hasOwnProperty('ApiHero');
  };

  DataSourceWrapper.prototype.getCollection = function(name, callback) {
    if (typeof arguments[arguments.length - 1] !== 'function') {
      throw 'callback required';
    }
    if (!this.isApiHeroEnabled()) {
      return callback("APIHero enabled DataSource for '" + this.name + "' required");
    }
    return this.ApiHero.getCollection.apply(this, arguments);
  };

  DataSourceWrapper.prototype.listModels = function() {
    var l;
    l = _.filter(this.models, (function(_this) {
      return function(model, name) {
        var _ref;
        return (0 > BuiltIns.indexOf(name)) && (model !== void 0) && (((_ref = model.getDataSource()) != null ? _ref.settings.name : void 0) === _this.sourceName);
      };
    })(this));
    return _.compact(_.map(l, function(m) {
      return m.definition.name;
    }));
  };

  DataSourceWrapper.prototype.listCollections = function(callback) {
    if (typeof arguments[arguments.length - 1] !== 'function') {
      throw 'callback required';
    }
    if (this.hasOwnProperty('ApiHero')) {
      return this.ApiHero.listCollections((function(_this) {
        return function(e, cols) {
          return callback(null, _.compact(_.map(cols, function(v) {
            var ex;
            if (!((ex = _this.ApiHero.exclude) && ex.length)) {
              return v;
            }
            if (!v.match(new RegExp("^(" + (ex.join('|')) + ")$"))) {
              return v;
            }
          })));
        };
      })(this));
    } else {
      return process.nextTick((function(_this) {
        return function() {
          return callback(null, _.keys(_this.models));
        };
      })(this));
    }
  };

  DataSourceWrapper.prototype.createCollection = function(name, json, opts, callback) {
    var _cB;
    _cB = arguments[arguments.length - 1];
    if (typeof _cB !== 'function') {
      throw 'callback required';
    }
    if (!this.isApiHeroEnabled()) {
      return callback("APIHero enabled DataSource for '" + this.name + "' required");
    }
    arguments[arguments.length - 1] = (function(_this) {
      return function(e, ref) {
        var _args;
        _args = arguments;
        return CollectionMonitor.getInstance().refresh(function() {
          return _cB.apply(_this, _args);
        });
      };
    })(this);
    return this.ApiHero.createCollection.apply(this.ApiHero, arguments);
  };

  DataSourceWrapper.prototype.dropCollection = function(name, callback) {
    var _cB;
    _cB = arguments[arguments.length - 1];
    if (typeof _cB !== 'function') {
      throw 'callback required';
    }
    if (!this.isApiHeroEnabled()) {
      return _cB("APIHero enabled DataSource for '" + this.name + "' required");
    }
    arguments[arguments.length - 1] = (function(_this) {
      return function(e, ref) {
        var cm;
        return (cm = CollectionMonitor.getInstance()).refresh(function(e, list) {
          if (e != null) {
            return _cB(e);
          }
          if (0 <= _.pluck(cm.getCollection(), 'name').indexOf(_this.name)) {
            if (typeof col !== "undefined" && col !== null) {
              return _cB("collection '" + _this.name + "' not dropped");
            }
          }
          return _cB(null, true);
        });
      };
    })(this);
    return this.ApiHero.dropCollection.apply(this.ApiHero, arguments);
  };

  DataSourceWrapper.prototype.removeCollection = function() {
    return this.dropCollection.apply(this, arguments);
  };

  DataSourceWrapper.prototype.renameCollection = function(name, newName, opts, callback) {
    var _cB;
    _cB = arguments[arguments.length - 1];
    if (typeof _cB !== 'function') {
      throw 'callback required';
    }
    if (!((newName != null) && typeof newName === 'string')) {
      return callback("new name is required");
    }
    arguments[arguments.length - 1] = (function(_this) {
      return function(e, ref) {
        var _args;
        _args = arguments;
        return CollectionMonitor.getInstance().refresh(function() {
          return _cB.apply(_this, _args);
        });
      };
    })(this);
    return this.ApiHero.renameCollection.apply(this.ApiHero, arguments);
  };

  DataSourceWrapper.prototype.buildModel = function(name, json, opts, callback) {
    var o;
    if (typeof arguments[arguments.length - 1] !== 'function') {
      throw 'callback required';
    }
    if (!this.isApiHeroEnabled()) {
      return callback("APIHero enabled DataSource for '" + this.name + "' required");
    }
    if (!this.buildModelFromInstance) {
      return callback("buildModel not supported for '" + this.name + "'");
    }
    if (typeof (o = this.buildModelFromInstance.apply(this, _.initial(arguments))) !== 'function') {
      throw 'could not create model';
    }
    return callback(null, o);
  };

  DataSourceWrapper.prototype.deriveSchema = function(nameOrCollection, callback) {
    return this.ApiHero.deriveSchema.apply(this.ApiHero, arguments);
  };

  return DataSourceWrapper;

})(DataSource);

DataSourceWrapper.getDataSource = (function(_this) {
  return function(name) {
    var DataSourceManager;
    DataSourceManager = require('./DataSourceManager');
    return DataSourceManager.getInstance().getDataSource(name);
  };
})(this);

module.exports = DataSourceWrapper;

CollectionMonitor = require('../collections/CollectionMonitor');

CollectionManager = require('../collections/CollectionManager');
