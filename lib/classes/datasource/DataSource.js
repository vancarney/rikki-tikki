// Generated by CoffeeScript 1.9.0
var CollectionManager, DataSource, EventEmitter, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

EventEmitter = require('events').EventEmitter;

CollectionManager = require('../collections/CollectionManager');

DataSource = (function(_super) {
  __extends(DataSource, _super);

  function DataSource(name, ds) {
    _.extend(this, _.clone(ds));
    this.sourceName = name;
    if (typeof ds.buildModelFromInstance === 'function') {
      this.canBuildModelFromInstance = function() {
        return true;
      };
      this.buildModelFromInstance = ds.buildModelFromInstance;
    }
    this.isRelational = function() {
      return this.connector.relational || false;
    };
    this.isNoSQL = function() {
      return this.connector.nosql || ((this.name.match(/^(mongodb|Memory)+$/)) != null) || false;
    };
  }

  DataSource.prototype.buildModelFromInstance = function(name, json, options) {
    throw 'dynamic collection creation not supported by this adapter';
  };

  DataSource.prototype.canBuildModelFromInstance = function() {
    return false;
  };

  DataSource.prototype.getDAO = function() {
    return this.connector.dataSource.DataAccessObject;
  };

  DataSource.prototype.connected = function() {
    return this.connector.connected;
  };

  DataSource.prototype.connect = function(callback) {
    if (typeof arguments[0] !== 'function') {
      throw 'callback required as arguments[0]';
    }
    if (!this.connected()) {
      return this.connect.apply(this, arguments);
    }
    return typeof callback === "function" ? callback(null, this) : void 0;
  };

  DataSource.prototype.listCollections = function() {
    return _.keys(this.models);
  };

  DataSource.prototype.createCollection = function(name, json, opts) {
    this.modelBuilder.on('initialize', (function(_this) {
      return function() {
        return console.log('initialized model');
      };
    })(this));
    return console.log((this.createModel.apply(this, arguments)).definition.rawProperties);
  };

  DataSource.prototype.buildCollection = function(name, json, opts) {
    var callback, o;
    if (typeof opts === 'function') {
      callback = arguments[2];
      opts = {};
    }
    this.modelBuilder.on('initialize', (function(_this) {
      return function() {
        return console.log('initialized model');
      };
    })(this));
    if (!this.canBuildModelFromInstance()) {
      throw "cannot create collections on SQL connection";
    }
    if (typeof (o = this.buildModelFromInstance.apply(this, arguments)) !== 'function') {
      throw 'could not create model';
    }
    return o;
  };

  DataSource.prototype.getCollection = function(name) {
    return console.log(this.models);
  };

  DataSource.prototype.removeCollection = function(name) {};

  return DataSource;

})(EventEmitter);

module.exports = DataSource;
