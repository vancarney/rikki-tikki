// Generated by CoffeeScript 1.10.0
var AbstractMonitor, ArrayCollection, Singleton, Util, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

Util = require('../utils');

Singleton = require('./Singleton');

ArrayCollection = require('js-arraycollection');

AbstractMonitor = (function(superClass) {
  extend(AbstractMonitor, superClass);

  AbstractMonitor.prototype.__exclude = [];

  AbstractMonitor.prototype.__iVal = null;

  function AbstractMonitor() {
    this.filter = bind(this.filter, this);
    var _initialized;
    AbstractMonitor.__super__.constructor.call(this);
    this.__collection = new ArrayCollection([]);
    _initialized = false;
    this.__collection.on('collectionChanged', (function(_this) {
      return function(data) {
        var type;
        type = 'changed';
        if (!_initialized) {
          type = 'init';
        }
        return _this.emit(type, data);
      };
    })(this));
    if (Util.Env.isDevelopment()) {
      setTimeout(((function(_this) {
        return function() {
          return _this.refresh(function(e, list) {
            _initialized = true;
            return _this.startPolling(_this.__iVal);
          });
        };
      })(this)), 3);
    }
  }

  AbstractMonitor.prototype.filter = function(value) {
    var i, item, len, ref, type;
    if ((type = typeof value) !== 'string') {
      throw (Util.Function.getConstructorName(this)) + ".filter expected value to be a string. Type was <" + type + ">";
    }
    ref = this.__exclude;
    for (i = 0, len = ref.length; i < len; i++) {
      item = ref[i];
      if (value.match(item)) {
        return false;
      }
    }
    return true;
  };

  AbstractMonitor.prototype.refresh = function(callback) {
    throw (Util.Function.getConstructorName(this)) + ".refresh(callback) is not implemented";
  };

  AbstractMonitor.prototype.startPolling = function(interval) {
    if (interval != null) {
      this.__polling_interval = interval;
    }
    this.stopPolling();
    if (this.__polling_interval != null) {
      return this.__iVal = setInterval(((function(_this) {
        return function() {
          return _this.refresh();
        };
      })(this)), this.__polling_interval);
    }
  };

  AbstractMonitor.prototype.stopPolling = function() {
    if (this.__iVal != null) {
      return clearInterval(this.__iVal);
    }
  };

  AbstractMonitor.prototype.getNames = function() {
    return _.map(this.getCollection(), 'name');
  };

  AbstractMonitor.prototype.getCollection = function() {
    return this.__collection.__list;
  };

  AbstractMonitor.prototype.getItemIdx = function(name) {
    return this.getNames().lastIndexOf(name);
  };

  AbstractMonitor.prototype.itemExists = function(name) {
    return this.getItemIdx(name) > -1;
  };

  return AbstractMonitor;

})(Singleton);

module.exports = AbstractMonitor;
