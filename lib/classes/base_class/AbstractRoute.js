// Generated by CoffeeScript 1.9.3
var APIOptions, AbstractRoute, CollectionManager, OperationTypes, Util, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash')._;

OperationTypes = require('../types').OperationTypes;

Util = require('../utils');

CollectionManager = require('../collections/CollectionManager');

APIOptions = require('../config/APIOptions');

AbstractRoute = (function(superClass) {
  extend(AbstractRoute, superClass);

  AbstractRoute.prototype.__before = null;

  AbstractRoute.prototype.__after = null;

  AbstractRoute.prototype.addBeforeHandler = function(fn) {
    if (typeof fn !== 'function') {
      throw "Param must be of type 'function' param was Type <" + (typeof fn) + ">";
    }
    if (this.__before == null) {
      this.__before = [];
    }
    return this.__before.push(fn);
  };

  AbstractRoute.prototype.addAfterHandler = function(fn) {
    if (typeof fn !== 'function') {
      throw "Param must be of type 'function' param was Type <" + (typeof fn) + ">";
    }
    if (this.__after == null) {
      this.__after = [];
    }
    return this.__after.push(fn);
  };

  function AbstractRoute(callback) {
    var DSManager, _collections, _createCollection, _getDS, dsm;
    DSManager = require('../datasource/DataSourceManager');
    dsm = DSManager.getInstance();
    if ('AbstractRoute' === Util.Function.getConstructorName(this)) {
      throw 'AbstractRoute can not be directly instatiated\nhint: use a subclass instead.';
    }
    _getDS = (function(_this) {
      return function(dsname) {
        var ds;
        if (typeof dsname !== 'string') {
          dsname = null;
        }
        if (dsname == null) {
          dsname = APIOptions.get('default_datasource');
        }
        return ds = dsm.getDataSource(dsname);
      };
    })(this);
    _collections = CollectionManager.getInstance();
    _createCollection = (function(_this) {
      return function(dsname, name, json, opts, callback) {
        var ds;
        ds = _getDS(dsname);
        return ds.buildModel(name, json, opts, function(e, model) {
          if (e) {
            return callback(e);
          }
          if (model == null) {
            return callback('unable to create model');
          }
          return model.create(json || {}, opts || {}, arguments[arguments - 1]);
        });
      };
    })(this);
    return (function(_this) {
      return function(req, res) {
        var _callback, dsname, name;
        dsname = _getDS(req.headers['DSNAME'] || null);
        name = req.params.collection;
        _callback = function(callback) {
          return function(e, data) {
            var content, status;
            if (e != null) {
              return typeof callback === "function" ? callback(e, null) : void 0;
            }
            _.each(_this.__after, function(after, k) {
              return after(req, res, data);
            });
            status = 200;
            content = _.isArray(data.ops) && data.ops.length === 1 ? data.ops[0] : data.ops;
            return typeof callback === "function" ? callback(null, {
              status: status,
              content: content
            }) : void 0;
          };
        };
        _this.handler.find = function(query, callback) {
          var q, ref, where;
          switch (typeof query) {
            case 'object':
              q = query;
              break;
            case 'string':
              q = JSON.parse(query);
              break;
            case 'function':
              q = {};
              callback = arguments[0];
              break;
            default:
              return typeof callback === "function" ? callback('unable to process query') : void 0;
          }
          if ((ref = req.query) != null ? ref.where : void 0) {
            q = req.query.where;
          }
          where = q != null ? _this.sanitize(q) : {};
          return _collections.getCollection(name, function(e, col) {
            if (col != null) {
              return col.find(where, _callback(callback));
            } else {
              if (Util.Env.isDevelopment()) {
                return callback != null ? callback.apply(_this, [
                  null, {
                    status: 200,
                    content: []
                  }
                ]) : void 0;
              } else {
                return typeof callback === "function" ? callback({
                  status: 400,
                  reason: "Bad Request"
                }, null) : void 0;
              }
            }
          });
        };
        _this.handler.list = function(callback) {
          return _this.handler.find({}, _callback(callback));
        };
        _this.handler.show = function(callback) {
          if (!req.params.hasOwnProperty('id')) {
            return typeof callback === "function" ? callback({
              status: 400,
              reason: 'required parameter `id` was not defined'
            }) : void 0;
          }
          return _collections.getCollection(name, function(e, col) {
            if (col == null) {
              return typeof callback === "function" ? callback({
                status: 400,
                reason: "collecton `" + name + "` was not defined"
              }, null) : void 0;
            }
            return col.findOne({
              _id: new ApiHero.getConnection().getTypes().ObjectId(req.params.id)
            }, function(e, doc) {
              if (e != null) {
                return typeof callback === "function" ? callback(e, null) : void 0;
              }
              return typeof callback === "function" ? callback(null, {
                status: (doc != null ? 200 : 404),
                content: doc
              }) : void 0;
            });
            if (Util.Env.isDevelopment()) {
              console.log('about to create collection');
              _createCollection(dsname, name, function(e, res) {
                return callback != null ? callback.apply(_this, e != null ? [
                  {
                    status: 400,
                    reason: e
                  }, null
                ] : [
                  null, {
                    status: 404,
                    content: {}
                  }
                ]) : void 0;
              });
            }
            return typeof callback === "function" ? callback({
              status: 400,
              reason: "Bad Request"
            }, null) : void 0;
          });
        };
        _this.handler.insert = function(callback) {
          return _collections.getCollection(name, function(e, col) {
            if (col != null) {
              return req.on('data', function(b) {
                var data;
                data = JSON.parse(b.toString('utf8'));
                if ((data != null) && ((data = _this.sanitize(data)) != null)) {
                  return col.insert(data, _callback(callback));
                } else {
                  return typeof callback === "function" ? callback({
                    status: 400,
                    reason: "Bad Request"
                  }, null) : void 0;
                }
              });
            } else {
              if (!Util.Env.isProduction()) {
                return req.on('data', function(b) {
                  var data;
                  data = JSON.parse(b.toString('utf8'));
                  if ((data != null) && ((data = _this.sanitize(data)) != null)) {
                    return _createCollection(dsname, name, data, {
                      idInjection: true
                    }, function(e, res) {
                      return callback != null ? callback.apply(_this, [
                        null, {
                          status: 200,
                          content: res
                        }
                      ]) : void 0;
                    });
                  }
                });
              } else {
                return typeof callback === "function" ? callback({
                  status: 400,
                  reason: "Bad Request"
                }, null) : void 0;
              }
            }
          });
        };
        _this.handler.update = function(callback) {
          return _collections.getCollection(name, function(e, col) {
            if (col != null) {
              return req.on('data', function(b) {
                var data, id;
                data = JSON.parse(b.toString('utf8'));
                if (data.hasOwnProperty('_id')) {
                  delete data._id;
                }
                if ((id = req.params.id) != null) {
                  return col.update({
                    _id: new ApiHero.getConnection().getTypes().ObjectId(id)
                  }, {
                    $set: data
                  }, function(e, num, rec) {
                    if (e != null) {
                      return typeof callback === "function" ? callback({
                        status: 400,
                        reason: e.message
                      }) : void 0;
                    }
                    return typeof callback === "function" ? callback({
                      status: 200,
                      content: rec
                    }) : void 0;
                  });
                } else {
                  return typeof callback === "function" ? callback({
                    status: 400,
                    reason: "Bad Request"
                  }, null) : void 0;
                }
              });
            } else {
              return typeof callback === "function" ? callback({
                status: 400,
                reason: "Bad Request"
              }, null) : void 0;
            }
          });
        };
        _this.handler.destroy = function(callback) {
          return _collections.getCollection(name, function(e, col) {
            if (col != null) {
              return col.remove({
                _id: new ApiHero.getConnection().getTypes().ObjectId(req.params.id)
              }, _callback(callback));
            } else {
              return typeof callback === "function" ? callback({
                status: 400,
                reason: "Bad Request"
              }, null) : void 0;
            }
          });
        };
        _.each(_this.__before, function(before, k) {
          return before(req, res, data);
        });
        return _this.handler(callback)(req, res);
      };
    })(this);
  }

  AbstractRoute.prototype.handler = function(callback) {
    throw (Util.Function.getConstructorName(this)) + ".handler(callback) is not implemented";
  };

  AbstractRoute.prototype.sanitize = function(query) {
    var filter, filtered, restricted;
    filter = null;
    filtered = [];
    restricted = [];
    filter = _.partial(_.without, _.keys(query));
    _.each(OperationTypes.query, (function(_this) {
      return function(v) {
        return filtered = filter(v);
      };
    })(this));
    _.each(filtered, (function(_this) {
      return function(v, k) {
        if ((v.match(/^\$/)) || (0 <= restricted.indexOf(v))) {
          return delete query[v];
        }
      };
    })(this));
    return query;
  };

  AbstractRoute.prototype.checkSchema = function(name) {};

  return AbstractRoute;

})(Object);

module.exports = AbstractRoute;
