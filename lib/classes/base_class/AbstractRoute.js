// Generated by CoffeeScript 1.8.0
var AbstractRoute, Env, RikkiTikkiAPI, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

Env = RikkiTikkiAPI.Util.Env;

AbstractRoute = (function(_super) {
  __extends(AbstractRoute, _super);

  AbstractRoute.prototype.__before = null;

  AbstractRoute.prototype.__after = null;

  AbstractRoute.prototype.addBeforeHandler = function(fn) {
    if (typeof fn !== 'function') {
      throw "Param must be of type 'function' param was Type <" + (typeof fn) + ">";
    }
    if (this.__before == null) {
      this.__before = [];
    }
    return this.__before.push(fn);
  };

  AbstractRoute.prototype.addAfterHandler = function(fn) {
    if (typeof fn !== 'function') {
      throw "Param must be of type 'function' param was Type <" + (typeof fn) + ">";
    }
    if (this.__after == null) {
      this.__after = [];
    }
    return this.__after.push(fn);
  };

  function AbstractRoute(callback) {
    var _collections, _createCollection, _db;
    if ('AbstractRoute' === RikkiTikkiAPI.Util.Function.getConstructorName(this)) {
      throw 'AbstractRoute can not be directly instatiated\nhint: use a subclass instead.';
    }
    _db = RikkiTikkiAPI.getConnection();
    _collections = RikkiTikkiAPI.getCollectionManager();
    _createCollection = function(name, callback) {
      return _collections.createCollection(name, {}, (function(_this) {
        return function(e, collection) {
          return typeof callback === "function" ? callback(e, collection) : void 0;
        };
      })(this));
    };
    return (function(_this) {
      return function(req, res) {
        var name, _callback;
        name = req.params.collection;
        _callback = function(callback) {
          return function(e, data) {
            if (e != null) {
              return typeof callback === "function" ? callback(e, null) : void 0;
            }
            _.each(_this.__after, function(after, k) {
              return after(req, res, data);
            });
            return typeof callback === "function" ? callback(null, {
              status: 200,
              content: _.isArray(data) && data.length === 1 ? data[0] : data
            }) : void 0;
          };
        };
        _this.handler.find = function(callback) {
          var where;
          where = _this.sanitize(JSON.parse(req.query.where || "{}"));
          return _collections.getCollection(name, function(e, col) {
            if (col != null) {
              return col.find(where, _callback(callback));
            } else {
              if (Env.isDevelopment()) {
                return _createCollection(name, function(e, res) {
                  return callback != null ? callback.apply(_this, e != null ? [
                    {
                      status: 400,
                      reason: e
                    }, null
                  ] : [
                    null, {
                      status: 200,
                      content: {}
                    }
                  ]) : void 0;
                });
              } else {
                return typeof callback === "function" ? callback({
                  status: 400,
                  reason: "Bad Request"
                }, null) : void 0;
              }
            }
          });
        };
        _this.handler.list = function(callback) {
          return _this.handler.find({}, _callback(callback));
        };
        _this.handler.show = function(callback) {
          return _this.handler.find({
            _id: req.params.id
          }, _callback(callback));
        };
        _this.handler.insert = function(callback) {
          return _collections.getCollection(name, function(e, col) {
            var data;
            if (col != null) {
              if ((data = req.body) && ((data = _this.sanitize(JSON.parse(JSON.stringify(data)))) != null)) {
                return col.insert(data, _callback(callback));
              } else {
                return typeof callback === "function" ? callback({
                  status: 400,
                  reason: "Bad Request"
                }, null) : void 0;
              }
            } else {
              if (Env.isDevelopment()) {
                return _createCollection(name, function(e, res) {
                  if (e != null) {
                    return typeof callback === "function" ? callback({
                      status: 400,
                      reason: e
                    }, null) : void 0;
                  }
                  return col.insert(data, _callback(callback));
                });
              } else {
                return typeof callback === "function" ? callback({
                  status: 400,
                  reason: "Bad Request"
                }, null) : void 0;
              }
            }
          });
        };
        _this.handler.update = function(callback) {
          return _collections.getCollection(name, function(e, col) {
            if (col != null) {
              return req.on('data', function(data) {
                var id;
                if (((id = req.params.id) != null) && (data != null) && ((data = _this.sanitize(JSON.parse(data))) != null)) {
                  return col.update({
                    _id: id
                  }, data, _callback(callback));
                } else {
                  return typeof callback === "function" ? callback({
                    status: 400,
                    reason: "Bad Request"
                  }, null) : void 0;
                }
              });
            } else {
              return typeof callback === "function" ? callback({
                status: 400,
                reason: "Bad Request"
              }, null) : void 0;
            }
          });
        };
        _this.handler.destroy = function(callback) {
          return _collections.getCollection(name, function(e, col) {
            if (col != null) {
              return col.destroy({
                _id: req.params.id
              }, _callback(callback));
            } else {
              return typeof callback === "function" ? callback({
                status: 400,
                reason: "Bad Request"
              }, null) : void 0;
            }
          });
        };
        _.each(_this.__before, function(before, k) {
          return before(req, res, data);
        });
        return _this.handler(callback)(req, res);
      };
    })(this);
  }

  AbstractRoute.prototype.handler = function(callback) {
    throw "" + (RikkiTikkiAPI.Util.Function.getConstructorName(this)) + ".handler(callback) is not implemented";
  };

  AbstractRoute.prototype.sanitize = function(query) {
    var filter, filtered, restricted;
    filter = null;
    filtered = [];
    restricted = [];
    filter = _.partial(_.without, _.keys(query));
    _.each(RikkiTikkiAPI.OperationTypes.query, (function(_this) {
      return function(v) {
        return filtered = filter(v);
      };
    })(this));
    _.each(filtered, (function(_this) {
      return function(v, k) {
        if ((v.match(/^\$/)) || (0 <= restricted.indexOf(v))) {
          return delete query[v];
        }
      };
    })(this));
    return query;
  };

  AbstractRoute.prototype.checkSchema = function(name) {};

  return AbstractRoute;

})(Object);

module.exports = AbstractRoute;
