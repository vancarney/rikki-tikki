// Generated by CoffeeScript 1.7.1
var AbstractLoader, EventEmitter, RikkiTikkiAPI, Util, fs, path, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

fs = require('fs');

path = require('path');

EventEmitter = require('events').EventEmitter;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI || module.parent.exports;

module.exports.RikkiTikkiAPI = RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

AbstractLoader = (function(_super) {
  __extends(AbstractLoader, _super);

  AbstractLoader.prototype.__data = null;

  function AbstractLoader(__path) {
    this.__path = __path;
    _super = arguments.callee.caller.__super__;
    if (typeof _super === 'undefined' || RikkiTikkiAPI.Util.Function.getFunctionName(_super.constructor !== 'AbstractLoader')) {
      throw "AbstractAdapter can not be directly instatiated\nhint: use a subclass instead.";
    }
    if (this.__path != null) {
      this.load((function(_this) {
        return function(e, s) {
          return setTimeout((function() {
            return _this.emit.apply(_this, e != null ? ['error', e] : ['success', s]);
          }), 3);
        };
      })(this));
    }
  }

  AbstractLoader.prototype.pathExists = function(_path) {
    if (_path != null ? _path.match(/\.(json|js)+$/) : void 0) {
      return fs.existsSync(_path);
    } else {
      return false;
    }
  };

  AbstractLoader.prototype.load = function(_path, callback) {
    var e;
    if (typeof _path === 'function') {
      callback = arguments[0];
      _path = void 0;
    } else if (_path != null) {
      this.__path = _path;
    }
    if (!this.__path) {
      return typeof callback === "function" ? callback('No load path defined') : void 0;
    }
    if (!(this.pathExists(this.__path))) {
      if (typeof callback === "function") {
        callback("path '" + this.__path + "' does not exist or is of incorrect type");
      }
      return;
    }
    try {
      if (this.__path.match(/\.js+$/)) {
        this.__data = require(this.__path.replace(/\.js$/, ''));
        return typeof callback === "function" ? callback(null, this.__data) : void 0;
      } else {
        return Util.File.readFile(this.__path, (function(_this) {
          return function(e, data) {
            var d;
            if (e != null) {
              return typeof callback === "function" ? callback(e, null) : void 0;
            }
            try {
              d = JSON.parse(data);
            } catch (_error) {
              e = _error;
              if (typeof callback === "function") {
                callback('data was not JSON string', null);
              }
            }
            return typeof callback === "function" ? callback(e, _this.__data = d) : void 0;
          };
        })(this));
      }
    } catch (_error) {
      e = _error;
      return typeof callback === "function" ? callback("could not load file '" + this.__path + "\n" + e, null) : void 0;
    }
  };

  AbstractLoader.prototype.get = function(attr) {
    return this.__data[attr];
  };

  AbstractLoader.prototype.set = function(attr, value) {
    return this.__data[attr] = value;
  };

  AbstractLoader.prototype.save = function(callback) {
    if (this.__path != null) {
      return Util.File.writeFile(this.__path, this.toString(true), null, callback);
    } else {
      return typeof callback === "function" ? callback("path was not defined") : void 0;
    }
  };

  AbstractLoader.prototype.rename = function(newPath, callback) {
    if ((this.__path != null) && this.pathExists(this.__path)) {
      return fs.rename(this.__path, newPath, (function(_this) {
        return function(e, s) {
          _this.__path = newPath;
          return typeof callback === "function" ? callback(e, s) : void 0;
        };
      })(this));
    } else {
      return typeof callback === "function" ? callback("file '" + this.__path + "' does not exist", null) : void 0;
    }
  };

  AbstractLoader.prototype.destroy = function(callback) {
    if ((this.__path != null) && this.pathExists(this.__path)) {
      return fs.unlink(this.__path, (function(_this) {
        return function(e, s) {
          return callback != null ? callback.apply(_this, arguments) : void 0;
        };
      })(this));
    } else {
      return typeof callback === "function" ? callback("file '" + this.__path + "' does not exist") : void 0;
    }
  };

  AbstractLoader.prototype.create = function(__path, data, callback) {
    this.__path = __path;
    if (typeof data === 'function') {
      callback = data;
      data = null;
    }
    if ((this.__path != null) && !this.pathExists(this.__path)) {
      return this.save(callback);
    } else {
      throw "file '" + this.__path + "' already exists";
    }
  };

  AbstractLoader.prototype.replacer = null;

  AbstractLoader.prototype.valueOf = function() {
    return this.__data;
  };

  AbstractLoader.prototype.toJSON = function() {
    return JSON.parse(this.toString());
  };

  AbstractLoader.prototype.toString = function(readable) {
    if (readable == null) {
      readable = false;
    }
    if (typeof this.__data === 'string') {
      return this.__data;
    }
    return JSON.stringify(this.__data, this.replacer, readable ? 2 : void 0);
  };

  return AbstractLoader;

})(EventEmitter);

module.exports = AbstractLoader;
