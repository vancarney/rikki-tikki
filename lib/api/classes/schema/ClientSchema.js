// Generated by CoffeeScript 1.7.1
var ClientSchema, RikkiTikkiAPI, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports;

ClientSchema = (function(_super) {
  __extends(ClientSchema, _super);

  ClientSchema.prototype.toJSON = function() {
    return this;
  };

  ClientSchema.prototype.toString = function(spacer) {
    return JSON.stringify(this, ClientSchema.replacer, spacer);
  };

  ClientSchema.prototype.toSource = function() {
    var ns, schema;
    ns = ((ns = RikkiTikkiAPI.API_NAMESPACE.concat('.')) !== '.' ? ns : '');
    schema = this.toJSON();
    delete schema.name;
    return _.template(ClientSchema.template, {
      name: RikkiTikkiAPI.Util.capitalize(this.name),
      schema: schema,
      ns: ns
    });
  };

  function ClientSchema(name, obj, opts) {
    this.name = name;
    ClientSchema.__super__.constructor.call(this, obj, opts);
  }

  return ClientSchema;

})(RikkiTikkiAPI.Schema);

ClientSchema.replacer = function(key, value) {
  var name;
  if (!value) {
    return void 0;
  }
  if (typeof value === 'function') {
    if (((name = RikkiTikkiAPI.Util.getFunctionName(value)) != null) && (0 >= RikkiTikkiAPI.Schema.nativeTypes.indexOf(name))) {
      return "Native::" + name;
    } else {
      return value.toString();
    }
  } else {
    return value;
  }
};

ClientSchema.template = "(function() {\n  var __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    __slice = [].slice;\n  <%=ns%><%=name%> = (function(_super) {\n      __extends(<%=name%>, _super);\n      function <%=name%>() {\n        <% _.each( schema, function(value,key) {%>\n          this.<%=key%> = <%=JSON.stringify(value)%>;\n        <%});%>\n      }\n  })(RikkiTikki.Schema);\n);";

module.exports = ClientSchema;
