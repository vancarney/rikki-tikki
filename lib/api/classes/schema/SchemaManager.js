// Generated by CoffeeScript 1.7.1
var RikkiTikkiAPI, Schema, SchemaManager, Util, fs, path, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

fs = require('fs');

path = require('path');

RikkiTikkiAPI = module.parent.exports;

Util = RikkiTikkiAPI.Util;

Schema = RikkiTikkiAPI.Schema;

SchemaManager = (function(_super) {
  __extends(SchemaManager, _super);

  function SchemaManager() {
    this.__loader = new RikkiTikkiAPI.SchemaLoader;
  }

  SchemaManager.prototype.createSchema = function(name, tree) {
    if (tree && !Util.isOfType(tree, Object)) {
      return this.__loader.addSchema(new Schema(tree));
    } else {
      throw 'tree must be an object';
    }
  };

  SchemaManager.prototype.alterSchema = function(name, tree) {
    var s;
    if (tree && Util.isOfType(tree, Object)) {
      if ((s = this.fetchSchema(name)) != null) {
        return s.add(tree);
      }
    } else {
      throw 'tree must be an object';
    }
  };

  SchemaManager.prototype.fetchSchema = function(name) {
    var schema;
    if ((schema = this.__loader.getSchema(name)) != null) {
      return schema;
    } else {
      throw "schema " + name + " was not found";
    }
  };

  SchemaManager.prototype.saveSchemas = function() {
    return this.__loader.save();
  };

  return SchemaManager;

})(Object);

SchemaManager.getInstance = function() {
  return this.__instance != null ? this.__instance : this.__instance = new SchemaManager();
};

module.exports = SchemaManager;
