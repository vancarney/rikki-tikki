// Generated by CoffeeScript 1.7.1
var RikkiTikkiAPI, SchemaLoader, SchemaManager, Util, fs, path, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

fs = require('fs');

path = require('path');

RikkiTikkiAPI = module.parent.exports;

module.exports.RikkiTikkiAPI = RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

SchemaLoader = require('./SchemaLoader');

SchemaManager = (function(_super) {
  __extends(SchemaManager, _super);

  SchemaManager.__schemas = {};

  function SchemaManager() {
    this.__path = "" + (RikkiTikkiAPI.getOptions().schema_path);
    this.load();
  }

  SchemaManager.prototype.load = function() {
    var e, file, stat, _i, _len, _ref, _results;
    try {
      stat = fs.statSync(this.__path);
    } catch (_error) {
      e = _error;
      throw new Error(e);
    }
    if (stat != null ? stat.isDirectory() : void 0) {
      _ref = fs.readdirSync(this.__path);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push((this.__schemas != null ? this.__schemas : this.__schemas = {})[Util.File.name(file)] = new SchemaLoader("" + (fs.realpathSync(this.__path)) + path.sep + file));
      }
      return _results;
    }
  };

  SchemaManager.prototype.createSchema = function(name, data, callback) {
    if (data == null) {
      data = {};
    }
    if (!this.__schemas[name]) {
      return (this.__schemas[name] = new SchemaLoader).create("" + this.__path + path.sep + name + ".json", data, callback);
    } else {
      throw "Schema '" + name + "' already exists";
    }
  };

  SchemaManager.prototype.getSchema = function(name, callback) {
    var schema;
    return typeof callback === "function" ? callback(null, (schema = this.__schemas[name]) != null ? schema : null) : void 0;
  };

  SchemaManager.prototype.listSchemas = function(callback) {
    return typeof callback === "function" ? callback(null, _.keys(this.__schemas)) : void 0;
  };

  SchemaManager.prototype.saveSchema = function(name, callback) {
    var schema;
    if ((schema = this.__schemas[name]) != null) {
      return schema.save(callback);
    }
  };

  SchemaManager.prototype.saveAll = function(callback) {
    var eOut;
    eOut = [];
    _.each(this.__schemas, function(v, k) {
      return v.save((function(_this) {
        return function(e) {
          if (e) {
            return eOut.push(e);
          }
        };
      })(this));
    });
    return typeof callback === "function" ? callback(eOut.length ? eOut : null) : void 0;
  };

  SchemaManager.prototype.destroySchema = function(name, callback) {
    var schema;
    if ((schema = this.__schemas[name]) != null) {
      return schema.destroy(callback);
    }
  };

  SchemaManager.prototype.toJSON = function(readable) {
    return JSON.parse(this.toString(readable));
  };

  SchemaManager.prototype.toString = function(readable) {
    return JSON.stringify({
      __meta__: this.__meta,
      __schemas__: this.__schemas
    }, SchemaLoader.replacer, readable ? 2 : void 0);
  };

  return SchemaManager;

})(RikkiTikkiAPI.base_classes.Singleton);

SchemaManager.getInstance = function() {
  return this.__instance != null ? this.__instance : this.__instance = new SchemaManager();
};

module.exports = SchemaManager;
