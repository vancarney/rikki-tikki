// Generated by CoffeeScript 1.7.1
var RikkiTikkiAPI, SchemaLoader, Util, fs, path, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

fs = require('fs');

path = require('path');

RikkiTikkiAPI = module.parent.exports;

Util = RikkiTikkiAPI.Util;

SchemaLoader = (function(_super) {
  __extends(SchemaLoader, _super);

  SchemaLoader.prototype.__schema = {};

  function SchemaLoader(__path) {
    this.__path = __path != null ? __path : RikkiTikkiAPI.SCHEMA_PATH;
    if (this.__path != null) {
      this.load();
    }
  }

  SchemaLoader.prototype.load = function() {
    var e, loadFile, o;
    o = {};
    if (!this.__path) {
      throw "No load path defined";
    }
    loadFile = function(p, o) {
      var e, file, parseObj, res, stat, _i, _len, _ref;
      if (o == null) {
        o = {};
      }
      try {
        stat = fs.statSync(p);
      } catch (_error) {
        e = _error;
        throw new Error(e);
        return false;
      }
      if (stat != null ? stat.isDirectory() : void 0) {
        _ref = fs.readdirSync(p);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          o = loadFile("" + (fs.realpathSync(p)) + path.sep + file, o);
        }
      } else {
        try {
          parseObj = function(res, o) {
            var className, fName;
            switch (typeof res) {
              case 'object':
                if (((className = RikkiTikkiAPI.Util.getConstructorName(res)) != null) && className !== 'Object') {
                  o[path.basename(p, '.js', '.json')] = res;
                } else {
                  _.each(_.keys(res), (function(_this) {
                    return function(name) {
                      var itm;
                      if ((itm = parseObj(res[name], o)) != null) {
                        return o[name] = itm;
                      }
                    };
                  })(this));
                }
                break;
              case 'function':
                if ((fName = RikkiTikkiAPI.Util.getFunctionName(res)) === 'model') {
                  o[res.modelName] = res;
                  if (!(o[res.modelName].hasOwnProperty('toClientSchema'))) {
                    o[res.modelName].toClientSchema = function() {
                      return RikkiTikkiAPI.model(this.modelName, this.schema).toClientSchema();
                    };
                  }
                }
            }
            return o;
          };
          res = require("" + p);
          o = parseObj(res, o);
        } catch (_error) {
          e = _error;
          throw e;
        }
      }
      return o;
    };
    if (this.__path instanceof Object) {
      if (this.__path instanceof Array) {
        return _.each(this.__path, (function(_this) {
          return function(v, k) {
            return _this.__schema = loadFile(v, _this.__schema);
          };
        })(this));
      } else {
        return _.each(_keys(this.__path), (function(_this) {
          return function(key) {
            return _this.__schema[key] = loadFile(_this.__path[key], _this.__schema);
          };
        })(this));
      }
    } else {
      try {
        return this.__schema = loadFile(this.__path);
      } catch (_error) {
        e = _error;
        throw e;
      }
    }
  };

  SchemaLoader.prototype.save = function() {};

  SchemaLoader.prototype.getSchema = function(name) {
    return this.__schema[name] || null;
  };

  SchemaLoader.prototype.toJSON = function() {
    return this.__schema;
  };

  SchemaLoader.prototype.toString = function() {
    return JSON.stringify(this.__schema, SchemaLoader.replacer);
  };

  return SchemaLoader;

})(Object);

SchemaLoader.replacer = function(key, value) {
  if ((value != null ? value.toClientSchema : void 0) != null) {
    value = value.toClientSchema();
  }
  if ((value != null) && (0 >= _.keys(RikkiTikkiAPI.Schema.reserved).indexOf(key))) {
    return Util.Function.toString(value);
  } else {
    return void 0;
  }
};

module.exports = SchemaLoader;
