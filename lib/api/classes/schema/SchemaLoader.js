// Generated by CoffeeScript 1.7.1
var AbstractLoader, RikkiTikkiAPI, SchemaLoader, Util, fs, path, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

fs = require('fs');

path = require('path');

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

module.exports.RikkiTikkiAPI = RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

AbstractLoader = require('../loaders/AbstractLoader');

SchemaLoader = (function(_super) {
  __extends(SchemaLoader, _super);

  SchemaLoader.prototype.__data = {};

  function SchemaLoader(path) {
    this.replacer = RikkiTikkiAPI.Schema.replacer;
    this.reviver = RikkiTikkiAPI.Schema.reviver;
    SchemaLoader.__super__.constructor.call(this, path);
  }

  SchemaLoader.prototype.set = function(tree, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    this.__data = _.extend(this.__data, tree);
    return this.save(callback);
  };

  SchemaLoader.prototype.unset = function(attr, callback) {
    if (this.__data.hasOwnProperty(attr)) {
      delete this.__data[attr];
    }
    return this.save(callback);
  };

  SchemaLoader.prototype.load = function(callback) {
    if (this.pathExists(this.__path)) {
      return SchemaLoader.__super__.load.call(this, (function(_this) {
        return function(e) {
          if (e != null) {
            return typeof callback === "function" ? callback(e) : void 0;
          }
          _this._data = JSON.parse(JSON.stringify(_this.__data, _this.replacer), _this.reviver);
          return typeof callback === "function" ? callback(null, _this.__data) : void 0;
        };
      })(this));
    } else {
      this.__data = {};
      return typeof callback === "function" ? callback(null, this.__data) : void 0;
    }
  };

  return SchemaLoader;

})(AbstractLoader);

module.exports = SchemaLoader;
