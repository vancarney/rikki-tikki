// Generated by CoffeeScript 1.7.1
var AdapterManager, RikkiTikkiAPI, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

AdapterManager = (function(_super) {
  __extends(AdapterManager, _super);

  function AdapterManager() {
    return AdapterManager.__super__.constructor.apply(this, arguments);
  }

  AdapterManager.prototype.__adapters = {};

  AdapterManager.prototype.registerAdapter = function(name, adapterClass) {
    return this.__adapters[name] = adapterClass;
  };

  AdapterManager.prototype.listAdapters = function() {
    return _.keys(this.__adapters);
  };

  AdapterManager.prototype.getAdapterClass = function(name) {
    return this.__adapters[name];
  };

  AdapterManager.prototype.unregisterAdapter = function(name) {
    return delete this.__adapters[name];
  };

  return AdapterManager;

})(RikkiTikkiAPI.base_classes.Singleton);

AdapterManager.getInstance = function() {
  return this.__instance != null ? this.__instance : this.__instance = new AdapterManager();
};

module.exports = AdapterManager;
