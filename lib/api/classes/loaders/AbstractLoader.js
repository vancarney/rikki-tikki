// Generated by CoffeeScript 1.7.1
var AbstractLoader, RikkiTikkiAPI, Util, fs, path, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

fs = require('fs');

path = require('path');

RikkiTikkiAPI = module.parent.exports;

Util = RikkiTikkiAPI.Util;

AbstractLoader = (function(_super) {
  __extends(AbstractLoader, _super);

  AbstractLoader.prototype.__data = null;

  function AbstractLoader(__path) {
    this.__path = __path;
    if (this.__path != null) {
      this.load();
    }
  }

  AbstractLoader.prototype.pathExists = function(_path) {
    if (_path != null ? _path.match(/\.(json|js)+$/) : void 0) {
      return fs.existsSync(_path);
    } else {
      return false;
    }
  };

  AbstractLoader.prototype.load = function(callback) {
    var e;
    if (!this.__path) {
      throw "No load path defined";
    }
    if (!this.pathExists(this.__path)) {
      throw "path '" + this.__path + "' does not exist";
    }
    try {
      this.__data = require(this.__path);
    } catch (_error) {
      e = _error;
      console.error("could load file '" + this.__path);
    }
    return typeof callback === "function" ? callback(e || null, this.__data) : void 0;
  };

  AbstractLoader.prototype.set = function(data) {
    return this.__data = data;
  };

  AbstractLoader.prototype.save = function(callback) {
    if (this.__path != null) {
      return fs.writeFile(this.__path, "" + (this.toString(true)), (function(_this) {
        return function(e) {
          if (e) {
            console.error("Failed to save file " + "'\nError: " + e);
          }
          return typeof callback === "function" ? callback(e || null) : void 0;
        };
      })(this));
    } else {
      return typeof callback === "function" ? callback("path was not defined") : void 0;
    }
  };

  AbstractLoader.prototype.destroy = function(callback) {
    if ((this.__path != null) && this.pathExists(this.__path)) {
      return fs.unlink(this.__path, (function(_this) {
        return function(e) {
          return typeof callback === "function" ? callback(e) : void 0;
        };
      })(this));
    } else {
      return typeof callback === "function" ? callback("file '" + name + "' does not exist") : void 0;
    }
  };

  AbstractLoader.prototype.create = function(__path, data, callback) {
    this.__path = __path;
    if (typeof data === 'function') {
      callback = data;
      data = null;
    }
    if ((this.__path != null) && !this.pathExists(this.__path)) {
      return this.save(callback);
    } else {
      throw "file '" + name + "' already exists";
    }
  };

  AbstractLoader.prototype.replacer = null;

  AbstractLoader.prototype.toJSON = function() {
    return JSON.parse(this.toString());
  };

  AbstractLoader.prototype.toString = function(readable) {
    return JSON.stringify(this.__data, this.replacer, readable ? 2 : void 0);
  };

  return AbstractLoader;

})(Object);

module.exports = AbstractLoader;
