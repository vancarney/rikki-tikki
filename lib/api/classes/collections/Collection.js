// Generated by CoffeeScript 1.7.1
var Collection, RikkiTikkiAPI, Util, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

Collection = (function(_super) {
  __extends(Collection, _super);

  function Collection(name) {
    this.name = name;
    this.getCollection = __bind(this.getCollection, this);
    if (!this.name) {
      throw "collection name must be defined";
    }
    Object.freeze(this);
  }

  Collection.prototype.getCollection = function(callback) {
    var _db;
    if ((_db = RikkiTikkiAPI.getConnection()) != null) {
      return _db.getMongoDB().collection(this.name, (function(_this) {
        return function(e, collection) {
          return typeof callback === "function" ? callback(e, collection) : void 0;
        };
      })(this));
    } else {
      return typeof callback === "function" ? callback('Database is not connected', null) : void 0;
    }
  };

  Collection.prototype.drop = function(callback) {
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.drop(callback);
      };
    })(this));
  };

  Collection.prototype.indexes = function(callback) {
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.indexes(callback);
      };
    })(this));
  };

  Collection.prototype.createIndex = function(name, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.createIndex(name, opts, callback);
      };
    })(this));
  };

  Collection.prototype.ensureIndex = function(name, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.ensureIndex(name, opts, callback);
      };
    })(this));
  };

  Collection.prototype.dropIndex = function(name, callback) {
    if (name === '_id') {
      throw "can not drop index on _id field";
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.dropIndex(name, callback);
      };
    })(this));
  };

  Collection.prototype.dropAllIndexes = function(callback) {
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.dropIndexes(callback);
      };
    })(this));
  };

  Collection.prototype.indexExists = function(indexNames, callback) {
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.indexExists(indexNames, callback);
      };
    })(this));
  };

  Collection.prototype.indexInformation = function(opts, callback) {
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.indexInformation(opts, callback);
      };
    })(this));
  };

  Collection.prototype._sanitize = function(params) {
    return Util.String.stripNull(typeof params === 'string' ? params : JSON.stringify(params));
  };

  Collection.prototype.find = function(params, opts, callback) {
    if (typeof opts === 'function') {
      callback = arguments[1];
      opts = null;
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.find(_this._sanitize(params), callback);
      };
    })(this));
  };

  Collection.prototype.insert = function(params, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.upsert(this._sanitize(params), opts, callback);
  };

  Collection.prototype.save = function(params, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.upsert(this._sanitize(params), opts, callback);
  };

  Collection.prototype.update = function(params, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.insert(_this._sanitize(params), opts, callback);
      };
    })(this));
  };

  Collection.prototype.upsert = function(params, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    opts.upsert = true;
    return this.update(this._sanitize(params), opts, callback);
  };

  Collection.prototype.show = function(callback) {
    return this.find({}, {}, callback);
  };

  Collection.prototype.rename = function(name, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.rename(name, opts, callback);
      };
    })(this));
  };

  Collection.prototype.remove = function(query, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.remove(query, opts, callback);
      };
    })(this));
  };

  Collection.prototype.destroy = function(id, callback) {
    return this.remove({
      _id: id
    }, null, callback);
  };

  Collection.prototype.getTree = function() {
    var tree;
    tree = {};
    this.getCollection((function(_this) {
      return function(e, col) {
        if (e != null) {
          return typeof callback === "function" ? callback(e, null) : void 0;
        }
        return col.find({}, function(e, res) {
          if ((e != null) || !res.length) {
            return [];
          }
          return _.each(res, function(v, k) {
            return _.extend(tree, (new Document(v)).serialize());
          });
        });
      };
    })(this));
    return tree;
  };

  return Collection;

})(Object);

module.exports = Collection;
