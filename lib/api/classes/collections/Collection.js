// Generated by CoffeeScript 1.7.1
var Collection, RikkiTikkiAPI, Util,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

Collection = (function(_super) {
  __extends(Collection, _super);

  function Collection(__collection) {
    this.__collection = __collection;
    if (typeof this.__collection === 'undefined' || this.__collection === null) {
      throw "collection instance must be defined";
    }
  }

  Collection.prototype.drop = function(callback) {
    return this.__collection.drop(callback);
  };

  Collection.prototype.indexes = function(callback) {
    return this.__collection.indexes(callback);
  };

  Collection.prototype.createIndex = function(name, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.__collection.createIndex(name, opts, callback);
  };

  Collection.prototype.ensureIndex = function(name, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.__collection.ensureIndex(name, opts, callback);
  };

  Collection.prototype.dropIndex = function(name, callback) {
    if (name === '_id') {
      throw "can not drop index on _id field";
    }
    return this.__collection.dropIndex(name, callback);
  };

  Collection.prototype.dropAllIndexes = function(callback) {
    return this.__collection.dropIndexes(callback);
  };

  Collection.prototype.indexExists = function(indexNames, callback) {
    return this.__collection.indexExists(indexNames, callback);
  };

  Collection.prototype.indexInformation = function(opts, callback) {
    if (opts == null) {
      opts = {};
    }
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.__collection.indexInformation(opts, callback);
  };

  Collection.prototype.find = function(params, opts, callback) {
    params = Util.stripNull(params);
    return this.__collection(params, opts, callback);
  };

  Collection.prototype.insert = function(data, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.upsert(data, opts, callback);
  };

  Collection.prototype.save = function(data, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.upsert(data, opts, callback);
  };

  Collection.prototype.update = function(data, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.__collection.insert(data, opts, callback);
  };

  Collection.prototype.upsert = function(data, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    opts.upsert = true;
    return this.update(data, opts, callback);
  };

  Collection.prototype.show = function() {};

  Collection.prototype.rename = function(name, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = null;
    }
    return this.__collection.rename(name, opts, callback);
  };

  Collection.prototype.remove = function(query, opts, callback) {
    if (opts == null) {
      opts = {};
    }
    return this.__collection.remove(query, opts, callback);
  };

  Collection.prototype.destroy = function(id, callback) {
    return this.remove({
      _id: id
    }, null, callback);
  };

  return Collection;

})(Object);

module.exports = Collection;
