// Generated by CoffeeScript 1.7.1
var Document, RikkiTikkiAPI, Util, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

Document = (function(_super) {
  __extends(Document, _super);

  Document.prototype.__data = {};

  function Document(data, opts) {
    if (opts == null) {
      opts = {};
    }
    this.errors = null;
    this.__schema = opts.schema || {
      validators: {}
    };
    if (data) {
      this.setData(data);
    }
  }

  Document.prototype.setData = function(data) {
    _.each(data, (function(_this) {
      return function(v, k) {
        if (typeof v === 'string') {
          return v = Util.stripNull(v);
        }
      };
    })(this));
    return this.__data = data;
  };

  Document.prototype.validate = function() {
    var k, path, v, validator, _i, _len, _ref;
    if (process.env !== 'development') {
      for (k in attrs) {
        v = attrs[k];
        if ((path = this.__schema.paths[k]) != null) {
          _ref = path.validators || [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            validator = _ref[_i];
            if ((validator[0](v)) === false) {
              return validator[1];
            }
          }
        } else {
          if (k !== this.idAttribute) {
            return "" + this.className + " has no attribute '" + k + "'";
          }
        }
      }
    }
  };

  Document.prototype.isValid = function() {
    return this.validate() === void 0;
  };

  Document.prototype.valueOf = function() {
    return this.toJSON();
  };

  Document.prototype.toJSON = function() {
    if (this.isValid()) {
      return this.__data;
    } else {
      return null;
    }
  };

  return Document;

})(Object);

module.exports = Document;
