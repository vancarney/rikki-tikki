// Generated by CoffeeScript 1.7.1
var Collection, CollectionManager, Connection, RikkiTikkiAPI, Util, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

Connection = RikkiTikkiAPI.Connection;

Collection = require('./Collection');

_ = require('underscore')._;

CollectionManager = (function(_super) {
  __extends(CollectionManager, _super);

  CollectionManager.prototype.__cache = {};

  function CollectionManager() {
    if (!(this.__conn = RikkiTikkiAPI.getConnection())) {
      throw 'database is not connected';
    }
    if (!Util.Object.isOfType(this.__conn, Connection)) {
      throw "Connection was invalid. Type was '" + (typeof this.__conn) + "'";
    }
    this.__db = this.__conn.getMongoDB() || (function() {
      throw Error('Connection is broken');
    })();
  }

  CollectionManager.prototype.createCollection = function(name, opts, callback) {
    if (typeof opts === 'function') {
      if (callback == null) {
        callback = opts;
      }
      opts = {};
    }
    return this.__db.createCollection(name, opts, (function(_this) {
      return function(e, collection) {
        RikkiTikkiAPI.getCollectionManitor().refresh();
        return typeof callback === "function" ? callback(e, collection) : void 0;
      };
    })(this));
  };

  CollectionManager.prototype.dropCollection = function(name, callback) {
    return this.getCollection(name, (function(_this) {
      return function(e, collection) {
        return collection.drop(function(e, res) {
          RikkiTikkiAPI.getCollectionManitor().refresh();
          return typeof callback === "function" ? callback(e, collection) : void 0;
        });
      };
    })(this));
  };

  CollectionManager.prototype.renameCollection = function(oldName, newName, callback) {
    return this.getCollection(oldName, (function(_this) {
      return function(e, collection) {
        return collection.rename(newName, {
          dropTarget: true
        }, function(e, res) {
          RikkiTikkiAPI.getCollectionManitor().refresh();
          return typeof callback === "function" ? callback(e, res) : void 0;
        });
      };
    })(this));
  };

  CollectionManager.prototype.getCollection = function(name, callback) {
    var col, collection, e;
    if (((collection = this.__cache[name]) != null) && collection instanceof Collection) {
      return typeof callback === "function" ? callback(null, _.clone(collection)) : void 0;
    } else {
      try {
        if ((col = new Collection(name)) != null) {
          return typeof callback === "function" ? callback(e, typeof e !== "undefined" && e !== null ? null : this.__cache[name] = col) : void 0;
        }
      } catch (_error) {
        e = _error;
        return typeof callback === "function" ? callback(e, null) : void 0;
      }
    }
  };

  return CollectionManager;

})(RikkiTikkiAPI.base_classes.SingletonEmitter);

CollectionManager.getInstance = function() {
  return this.__instance != null ? this.__instance : this.__instance = new CollectionManager;
};

module.exports = CollectionManager;
