// Generated by CoffeeScript 1.7.1
var ArrayCollection, CollectionMonitor, Connection, EventEmitter, RikkiTikkiAPI, Util, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

Connection = RikkiTikkiAPI.Connection;

EventEmitter = require('events').EventEmitter;

ArrayCollection = require('js-arraycollection').ArrayCollection;

CollectionMonitor = (function(_super) {
  __extends(CollectionMonitor, _super);

  function CollectionMonitor(__conn, opts) {
    var _initialized;
    this.__conn = __conn;
    if (opts == null) {
      opts = {
        interval: 0
      };
    }
    if (!this.__conn) {
      throw Error('CollectionMonitor requires a Connection as arg1');
    }
    if (!Util.isOfType(this.__conn, Connection)) {
      throw Error("CollectionMonitor arg1 must be Connection. Type was '" + (typeof this.__conn) + "'");
    }
    this.__db = this.__conn.getMongoDB();
    this.__collectionNames = new ArrayCollection([]);
    _initialized = false;
    this.__collectionNames.on('collectionChanged', (function(_this) {
      return function(data) {
        var type;
        type = 'changed';
        if (!_initialized) {
          _initialized = true;
          type = 'init';
        }
        return _this.emit(type, data);
      };
    })(this));
    this.refresh();
    if ((opts.interval != null) && opts.interval > 0) {
      this.start(opts.interval);
    }
  }

  CollectionMonitor.prototype.refresh = function(callback) {
    return this.__conn.getCollectionNames((function(_this) {
      return function(e, names) {
        var list;
        if ((names != null ? names.length : void 0) > 0) {
          list = _.compact(_.map(names, function(v) {
            var n;
            if (!v['name'].match(/\.indexes+$/)) {
              return {
                name: (n = v.name.split('.')).pop(),
                db: n.shift(),
                options: v.options
              };
            }
          }));
          _this.__collectionNames.setSource(list);
        }
        return typeof callback === "function" ? callback(e, list) : void 0;
      };
    })(this));
  };

  CollectionMonitor.prototype.start = function(interval) {
    if (interval == null) {
      interval = 20;
    }
    return this.__iVal = setInterval(((function(_this) {
      return function() {
        return _this.refresh();
      };
    })(this)), interval);
  };

  CollectionMonitor.prototype.stop = function() {
    if (this.__iVal != null) {
      return clearInterval(this.__iVal);
    }
  };

  CollectionMonitor.prototype.getNames = function() {
    return _.pluck(this.getCollections(), 'name');
  };

  CollectionMonitor.prototype.getCollections = function() {
    return this.__collectionNames.__list;
  };

  CollectionMonitor.prototype.collectionExists = function(name) {
    return this.getNames().lastIndexOf(name > -1);
  };

  return CollectionMonitor;

})(EventEmitter);

CollectionMonitor.getInstance = function(opts) {
  var conn;
  if (!(conn = RikkiTikkiAPI.getConnection())) {
    throw 'database is not connected';
  }
  return this.__instance != null ? this.__instance : this.__instance = new CollectionMonitor(conn, opts);
};

module.exports = CollectionMonitor;
