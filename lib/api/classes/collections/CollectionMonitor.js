// Generated by CoffeeScript 1.7.1
var ArrayCollection, CollectionMonitor, Connection, RikkiTikkiAPI, Util, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

ArrayCollection = require('js-arraycollection').ArrayCollection;

RikkiTikkiAPI = module.parent.exports.RikkiTikkiAPI;

Util = RikkiTikkiAPI.Util;

Connection = RikkiTikkiAPI.Connection;

CollectionMonitor = (function(_super) {
  __extends(CollectionMonitor, _super);

  CollectionMonitor.prototype.__polling_interval = 10000;

  CollectionMonitor.prototype.__exclude = [/^_+.*$/, /^indexes+$/, /^migrations+$/];

  function CollectionMonitor() {
    var _initialized;
    CollectionMonitor.__super__.constructor.call(this);
    if ((this.__conn = RikkiTikkiAPI.getConnection()) != null) {
      this.__db = this.__conn.getMongoDB();
    } else {
      throw 'database is not connected';
    }
    this.__collectionNames = new ArrayCollection([]);
    _initialized = false;
    this.__collectionNames.on('collectionChanged', (function(_this) {
      return function(data) {
        var type;
        type = 'changed';
        if (!_initialized) {
          _initialized = true;
          type = 'init';
        }
        return _this.emit(type, data);
      };
    })(this));
    this.refresh();
    if (RikkiTikkiAPI.Util.Env.isDevelopment()) {
      this.startPolling();
    }
  }

  CollectionMonitor.prototype.filter = function(value) {
    var item, _i, _len, _ref;
    _ref = this.__exclude;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if ((value.split('.').pop()).match(item)) {
        return true;
      }
    }
    return false;
  };

  CollectionMonitor.prototype.refresh = function(callback) {
    return this.__conn.getCollectionNames((function(_this) {
      return function(e, names) {
        var ex, list, rm;
        ex = [];
        if ((names != null ? names.length : void 0) > 0) {
          list = _.compact(_.map(names, function(v) {
            var n;
            if (!_this.filter(v.name)) {
              return {
                name: (n = v.name.split('.')).pop(),
                db: n.shift(),
                options: v.options
              };
            }
          }));
          _.each(list, function(val, key) {
            if (0 <= _this.getNames().indexOf(val.name)) {
              return ex.push(val);
            }
          });
          _.each((rm = _.difference(_this.getNames(), _.pluck(list, 'name'))), function(item) {
            return _this.__collectionNames.removeItemAt(_this.getNames().indexOf(item));
          });
          if ((list = _.difference(list, ex)).length) {
            _this.__collectionNames.setSource(list);
          }
        }
        return typeof callback === "function" ? callback(e, list) : void 0;
      };
    })(this));
  };

  CollectionMonitor.prototype.startPolling = function(interval) {
    var __polling_interval;
    if (interval != null) {
      __polling_interval = interval;
    }
    return this.__iVal = setInterval(((function(_this) {
      return function() {
        return _this.refresh();
      };
    })(this)), this.__polling_interval);
  };

  CollectionMonitor.prototype.stopPolling = function() {
    if (this.__iVal != null) {
      return clearInterval(this.__iVal);
    }
  };

  CollectionMonitor.prototype.getNames = function() {
    return _.pluck(this.getCollections(), 'name');
  };

  CollectionMonitor.prototype.getCollections = function() {
    return this.__collectionNames.__list;
  };

  CollectionMonitor.prototype.collectionExists = function(name) {
    return this.getNames().lastIndexOf(name > -1);
  };

  return CollectionMonitor;

})(RikkiTikkiAPI.base_classes.SingletonEmitter);

CollectionMonitor.getInstance = function() {
  return this.__instance != null ? this.__instance : this.__instance = new CollectionMonitor;
};

module.exports = CollectionMonitor;
