// Generated by CoffeeScript 1.7.1
var ArrayCollection, Backbone, EventEmitter, RikkiTikkiAPI, fs, path, _, _collections, _connections, _dsn, _router, _types,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

Backbone = require('backbone');

EventEmitter = require('events').EventEmitter;

fs = require('fs');

path = require('path');

ArrayCollection = require('js-arraycollection').ArrayCollection;

RikkiTikkiAPI = (function(_super) {
  var __detected_adapter;

  __extends(RikkiTikkiAPI, _super);

  __detected_adapter = null;

  function RikkiTikkiAPI(dsn, options) {
    var name, _i, _len, _ref;
    if (dsn == null) {
      dsn = null;
    }
    this.options = options != null ? options : {
      adapter: null
    };
    _ref = ['express', 'hapi'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      if (RikkiTikkiAPI.Util.detectModule(name)) {
        if (this.__detected_adapter == null) {
          this.__detected_adapter = name;
        }
        break;
      }
    }
    if (dsn !== false) {
      this.connect(dsn != null ? dsn : (new RikkiTikkiAPI.ConfigLoader).toJSON());
    }
    this.useAdapter(this.options.adapter != null ? this.options.adapter : 'routes');
    RikkiTikkiAPI.schemas = new RikkiTikkiAPI.SchemaLoader(this.options.schema_path || void 0);
  }

  RikkiTikkiAPI.prototype.connect = function(dsn, opts) {
    if ((dsn != null) && dsn instanceof String && dsn.match(/\.json$/)) {
      dsn = (new RikkiTikkiAPI.ConfigLoader(dsn)).toJSON();
    }
    this.__conn = new RikkiTikkiAPI.Connection;
    this.__conn.on('open', (function(_this) {
      return function(evt) {
        RikkiTikkiAPI.collectionMon = new RikkiTikkiAPI.CollectionMonitor(RikkiTikkiAPI.connection = _this.__conn);
        return opts != null ? typeof opts.open === "function" ? opts.open(evt) : void 0 : void 0;
      };
    })(this));
    this.__conn.on('close', (function(_this) {
      return function(evt) {
        return opts != null ? typeof opts.close === "function" ? opts.close(evt) : void 0 : void 0;
      };
    })(this));
    this.__conn.on('error', (function(_this) {
      return function(e) {
        return opts != null ? typeof opts.error === "function" ? opts.error(e) : void 0 : void 0;
      };
    })(this));
    return this.__conn.connect(dsn);
  };

  RikkiTikkiAPI.prototype.disconnect = function(callback) {
    return this.__conn.close(callback);
  };

  RikkiTikkiAPI.prototype.listAdapters = function() {
    return RikkiTikkiAPI.listRoutingAdapters();
  };

  RikkiTikkiAPI.prototype.getAdapter = function(name) {
    if (!(name != null)) {
      throw "RikkiTikkiAPI::getAdapter: Name is required";
    }
    return RikkiTikkiAPI.getRoutingAdapter(name);
  };

  RikkiTikkiAPI.prototype.addAdapter = function(name, adapter) {
    return RikkiTikkiAPI.addRoutingAdapter(name(adapter));
  };

  RikkiTikkiAPI.prototype.useAdapter = function(adapter) {
    if (!(adapter != null)) {
      throw 'param \'adapter\' is required';
    } else {
      if (typeof adapter === 'string') {
        if (this.listAdapters().indexOf(adapter) >= 0) {
          return this.__adapter = this.getAdapter(adapter);
        } else {
          throw "Routing Adapter '" + adapter + "' was undefined";
        }
      } else {
        if (adapter instanceof RikkiTikkiAPI._adapters.AbstractAdapter) {
          return this.__adapter = adapter;
        } else {
          throw "Routing Adapter must inherit from 'RikkiTikkiAPI.AbstractAdapter'";
        }
      }
    }
  };

  RikkiTikkiAPI.prototype.registerApp = function(__parent, adapter) {
    this.__parent = __parent;
    this.useAdapter(adapter || this.__detected_adapter);
    if (typeof this.__adapter === 'function') {
      this.__adapter = new this.__adapter({
        app: this.__parent
      });
    }
    return this.router = new RikkiTikkiAPI.Router(this.__conn, this.__adapter || null);
  };

  return RikkiTikkiAPI;

})(EventEmitter);

module.exports = RikkiTikkiAPI;

RikkiTikkiAPI.DEBUG = false;

RikkiTikkiAPI.SCHEMA_PATH = './schemas';

RikkiTikkiAPI.getEnvironment = function() {
  return process.env.NODE_ENV || 'development';
};

RikkiTikkiAPI.API_BASEPATH = '/api';

RikkiTikkiAPI.API_VERSION = '1';

RikkiTikkiAPI.API_NAMESPACE = '';

RikkiTikkiAPI.getAPIPath = function() {
  return "" + RikkiTikkiAPI.API_BASEPATH + "/" + RikkiTikkiAPI.API_VERSION;
};

RikkiTikkiAPI.CONFIG_FILENAME = 'rikkitikki.json';

RikkiTikkiAPI.CONFIG_PATH = 'config';

RikkiTikkiAPI.schemas = {
  sku: Number,
  name: String,
  description: String
};

RikkiTikkiAPI.getFullPath = function() {
  return path.normalize("" + (process.cwd()) + path.sep + RikkiTikkiAPI.CONFIG_PATH + path.sep + RikkiTikkiAPI.CONFIG_FILENAME);
};

RikkiTikkiAPI.listCollections = function() {
  if (RikkiTikkiAPI.collectionMon != null) {
    return RikkiTikkiAPI.collectionMon.getNames();
  } else {
    return [];
  }
};

RikkiTikkiAPI.configExists = function(_path) {
  return fs.existsSync((_path != null ? _path.match(/\.json$/) : void 0) ? _path : RikkiTikkiAPI.getFullPath());
};

RikkiTikkiAPI.model = function(name, schema) {
  var model, type;
  if (schema == null) {
    schema = {};
  }
  if (!name) {
    throw "name is required for model";
  }
  if ((type = typeof name) !== 'string') {
    throw "name expected to be String type was '" + type + "'";
  }
  model = function model(name, schema) { if (!(this instanceof RikkiTikkiAPI.model)) return new RikkiTikkiAPI.model( name, schema ); };
  model.modelName = name;
  model.schema = schema;
  model.toClientSchema = function() {
    return new RikkiTikkiAPI.ClientSchema(this.modelName, this.schema);
  };
  return model;
};

RikkiTikkiAPI.Util = require('./classes/utils');

_types = require('./classes/types');

RikkiTikkiAPI.OperationTypes = _types.OperationTypes;

_dsn = require('./classes/dsn');

RikkiTikkiAPI.DSNOptions = _dsn.DSNOptions;

RikkiTikkiAPI.DSN = _dsn.DSN;

_connections = require('./classes/connections');

RikkiTikkiAPI.Connection = _connections.Connection;

_router = require('./classes/router');

RikkiTikkiAPI.Router = _router.Router;

RikkiTikkiAPI.RoutingParams = _router.RoutingParams;

RikkiTikkiAPI.ConfigLoader = require('./classes/config/ConfigLoader');

RikkiTikkiAPI.Schema = require('./classes/schema/Schema');

RikkiTikkiAPI.ClientSchema = require('./classes/schema/ClientSchema');

RikkiTikkiAPI.SchemaLoader = require('./classes/schema/SchemaLoader');

RikkiTikkiAPI.SchemaManager = require('./classes/schema/SchemaManager');

RikkiTikkiAPI._adapters = require('./classes/adapters');

_collections = require('./classes/collections');

RikkiTikkiAPI.CollectionManager = _collections.CollectionManager;

RikkiTikkiAPI.CollectionMonitor = _collections.CollectionMonitor;
