// Generated by CoffeeScript 1.7.1
var ArrayCollection, Backbone, EventEmitter, RikkiTikkiAPI, fs, path, _, _collections, _connections, _dsn, _router, _types,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore')._;

Backbone = require('backbone');

EventEmitter = require('events').EventEmitter;

fs = require('fs');

path = require('path');

ArrayCollection = require('js-arraycollection').ArrayCollection;

RikkiTikkiAPI = (function(_super) {
  __extends(RikkiTikkiAPI, _super);

  RikkiTikkiAPI.prototype.__adapter = null;

  function RikkiTikkiAPI(__options, callback) {
    var adapter, name, _i, _len, _ref;
    if (__options == null) {
      __options = new RikkiTikkiAPI.APIOptions;
    }
    if (!(RikkiTikkiAPI.Util.isOfType(__options, RikkiTikkiAPI.APIOptions))) {
      __options = new RikkiTikkiAPI.APIOptions(__options);
    }
    _ref = ['express', 'hapi'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      if (RikkiTikkiAPI.Util.detectModule(name)) {
        if (this.__detected_adapter == null) {
          this.__detected_adapter = name;
        }
        break;
      }
    }
    RikkiTikkiAPI.getSchemas = (function(_this) {
      return function() {
        return RikkiTikkiAPI.SchemaManager.getInstance();
      };
    })(this);
    RikkiTikkiAPI.useAdapter = (function(_this) {
      return function(adapter, options) {
        var router;
        if (adapter) {
          if (typeof adapter === 'string') {
            if (0 <= RikkiTikkiAPI.Adapters.listAdapters().indexOf(adapter)) {
              _this.__adapter = new (RikkiTikkiAPI.Adapters.getAdapter(adapter))(options);
            } else {
              throw "Routing Adapter '" + adapter + "' was not registered. Use RikkiTikkiAPI.Adapters.registerAdapter(name, class)";
            }
          } else {
            if (adapter instanceof RikkiTikkiAPI.base_classes.AbstractAdapter) {
              _this.__adapter = adapter;
            } else {
              throw "Routing Adapter must inherit from 'RikkiTikkiAPI.base_classes.AbstractAdapter'";
            }
          }
          if (RikkiTikkiAPI.getConnection() != null) {
            if ((_this.__adapter != null) && ((router = RikkiTikkiAPI.Router.getInstance()) != null)) {
              return router.intializeRoutes();
            }
          } else {
            return _this.once('open', function() {
              if ((_this.__adapter != null) && ((router = RikkiTikkiAPI.Router.getInstance()) != null)) {
                return router.intializeRoutes();
              }
            });
          }
        } else {
          throw 'param \'adapter\' is required';
        }
      };
    })(this);
    RikkiTikkiAPI.getAdapter = (function(_this) {
      return function() {
        return _this.__adapter;
      };
    })(this);
    if ((adapter = __options.get('adapter')) != null) {
      RikkiTikkiAPI.useAdapter(adapter);
    }
    (this.__config = new RikkiTikkiAPI.ConfigLoader(__options)).load((function(_this) {
      return function(e, data) {
        if (e != null) {
          return typeof callback === "function" ? callback(e) : void 0;
        }
        return _this.connect(_this.__config.getEnvironment(RikkiTikkiAPI.getEnvironment()), {
          open: function() {
            if (__options.adapter != null) {
              RikkiTikkiAPI.useAdapter(__options.adapter);
            }
            return _this.emit('open', null, _this.__conn);
          },
          error: function(e) {
            return _this.emit('open', e, null);
          },
          close: function() {
            return _this.emit('close');
          }
        });
      };
    })(this));
    RikkiTikkiAPI.getOptions = (function(_this) {
      return function() {
        return __options.valueOf();
      };
    })(this);
    if (typeof callback === "function") {
      callback(null, true);
    }
  }

  RikkiTikkiAPI.prototype.connect = function(dsn, opts) {
    this.__conn = new RikkiTikkiAPI.Connection;
    this.__conn.on('open', (function(_this) {
      return function(evt) {
        RikkiTikkiAPI.connection = _this.__conn;
        RikkiTikkiAPI.collectionMon = new RikkiTikkiAPI.CollectionMonitor(_this.__conn);
        RikkiTikkiAPI.collections = new RikkiTikkiAPI.CollectionManager.getInstance();
        return opts != null ? typeof opts.open === "function" ? opts.open(evt) : void 0 : void 0;
      };
    })(this));
    this.__conn.on('close', (function(_this) {
      return function(evt) {
        return opts != null ? typeof opts.close === "function" ? opts.close(evt) : void 0 : void 0;
      };
    })(this));
    this.__conn.on('error', (function(_this) {
      return function(e) {
        return opts != null ? typeof opts.error === "function" ? opts.error(e) : void 0 : void 0;
      };
    })(this));
    return this.__conn.connect(dsn);
  };

  RikkiTikkiAPI.prototype.disconnect = function(callback) {
    return this.__conn.close(callback);
  };

  RikkiTikkiAPI.prototype.registerApp = function(__parent, adapter) {
    this.__parent = __parent;
    return this.router = new RikkiTikkiAPI.Router;
  };

  return RikkiTikkiAPI;

})(EventEmitter);

module.exports = RikkiTikkiAPI;

RikkiTikkiAPI.DEBUG = false;

RikkiTikkiAPI.ADAPTER = null;

RikkiTikkiAPI.API_BASEPATH = 'api';

RikkiTikkiAPI.API_VERSION = '1';

RikkiTikkiAPI.API_NAMESPACE = '';

RikkiTikkiAPI.CONFIG_PATH = "" + (process.cwd()) + path.sep + "configs";

RikkiTikkiAPI.CONFIG_FILENAME = 'db.json';

RikkiTikkiAPI.SCHEMA_PATH = "" + (process.cwd()) + path.sep + "schemas";

RikkiTikkiAPI.SCHEMA_TREES_FILE = 'schema.json';

RikkiTikkiAPI.getConnection = function() {
  return this.connection;
};

RikkiTikkiAPI.getEnvironment = function() {
  return process.env.NODE_ENV || 'development';
};

RikkiTikkiAPI.isDevelopment = function() {
  return this.getEnvironment() === 'development';
};

RikkiTikkiAPI.getAPIPath = function() {
  return "" + RikkiTikkiAPI.API_BASEPATH + "/" + RikkiTikkiAPI.API_VERSION;
};

RikkiTikkiAPI.createAdapter = function(name, options) {
  var param, _i, _len, _ref;
  _ref = ['name', 'options'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    param = _ref[_i];
    if (typeof param === 'undefined' || param === null) {
      throw "param '" + param + "' is not defined";
    }
  }
  return RikkiTikkiAPI.Adapters.createAdapter(name, options);
};

RikkiTikkiAPI.getSchemaManager = function() {
  return RikkiTikkiAPI.SchemaManager.getInstance();
};

RikkiTikkiAPI.getCollectionManager = function() {
  return RikkiTikkiAPI.CollectionManager.getInstance();
};

RikkiTikkiAPI.getCollectionManitor = function() {
  return RikkiTikkiAPI.CollectionMonitor.getInstance();
};

RikkiTikkiAPI.listCollections = function() {
  if (RikkiTikkiAPI.collectionMon != null) {
    return RikkiTikkiAPI.collectionMon.getNames();
  } else {
    return [];
  }
};

RikkiTikkiAPI.model = function(name, schema) {
  var model, type;
  if (schema == null) {
    schema = {};
  }
  if (!name) {
    throw "name is required for model";
  }
  if ((type = typeof name) !== 'string') {
    throw "name expected to be String type was '" + type + "'";
  }
  model = function model(data, opts) { if (!(this instanceof RikkiTikkiAPI.model)) return _.extend(arguments.callee, new RikkiTikkiAPI.Document( data, opts )); };
  model.modelName = name;
  model.schema = schema;
  model.toClientSchema = function() {
    return new RikkiTikkiAPI.ClientSchema(this.modelName, this.schema);
  };
  model.toAPISchema = function() {
    return new RikkiTikkiAPI.APISchema(this.modelName, this.schema);
  };
  return model;
};

RikkiTikkiAPI.Util = require('./classes/utils');

RikkiTikkiAPI.base_classes = require('./classes/base_class');

RikkiTikkiAPI.APIOptions = require('./classes/config/APIOptions');

_types = require('./classes/types');

RikkiTikkiAPI.OperationTypes = _types.OperationTypes;

_dsn = require('./classes/dsn');

RikkiTikkiAPI.DSNOptions = _dsn.DSNOptions;

RikkiTikkiAPI.DSN = _dsn.DSN;

_connections = require('./classes/connections');

RikkiTikkiAPI.Connection = _connections.Connection;

_router = require('./classes/router');

RikkiTikkiAPI.Router = _router.Router;

RikkiTikkiAPI.RoutingParams = _router.RoutingParams;

RikkiTikkiAPI.ConfigLoader = require('./classes/config/ConfigLoader');

RikkiTikkiAPI.Schema = require('./classes/schema/Schema');

RikkiTikkiAPI.APISchema = require('./classes/schema/APISchema');

RikkiTikkiAPI.ClientSchema = require('./classes/schema/ClientSchema');

RikkiTikkiAPI.SchemaManager = require('./classes/schema/SchemaManager');

RikkiTikkiAPI.SchemaTreeManager = require('./classes/schema_tree/SchemaTreeManager');

RikkiTikkiAPI._adapters = require('./classes/adapters');

_collections = require('./classes/collections');

RikkiTikkiAPI.CollectionManager = _collections.CollectionManager;

RikkiTikkiAPI.CollectionMonitor = _collections.CollectionMonitor;

RikkiTikkiAPI.Document = _collections.Document;

RikkiTikkiAPI.Model = _collections.Model;
