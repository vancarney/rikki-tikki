// Generated by CoffeeScript 1.7.1
(function() {
  var ArrayCollection, Backbone, EventEmitter, RikkiTikkiAPI, fs, mongoose, path, url, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore')._;

  Backbone = require('backbone');

  EventEmitter = require('events').EventEmitter;

  fs = require('fs');

  path = require('path');

  ArrayCollection = require('js-arraycollection').ArrayCollection;

  if (!exports.RikkiTikki) {
    RikkiTikkiAPI = exports.RikkiTikkiAPI = RikkiTikkiAPI = (function(_super) {
      __extends(RikkiTikkiAPI, _super);

      function RikkiTikkiAPI(dsn) {
        if (dsn == null) {
          dsn = null;
        }
        if (dsn !== false) {
          this.connect(dsn != null ? dsn : (new RikkiTikkiAPI.ConfigLoader).toJSON());
        }
      }

      RikkiTikkiAPI.prototype.connect = function(dsn, opts) {
        if ((dsn != null) && dsn instanceof String && dsn.match(/\.json$/)) {
          dsn = (new ConfigLoader(dsn)).toJSON();
        }
        this.__db = new RikkiTikkiAPI.Connection;
        this.__db.on('open', (function(_this) {
          return function() {
            _this.collectionMon = new RikkiTikkiAPI.CollectionMonitor(_this.__db.getMongoDB());
            return opts != null ? typeof opts.open === "function" ? opts.open() : void 0 : void 0;
          };
        })(this));
        this.__db.on('close', (function(_this) {
          return function() {
            return opts != null ? typeof opts.close === "function" ? opts.close() : void 0 : void 0;
          };
        })(this));
        this.__db.on('connect', (function(_this) {
          return function() {
            return opts != null ? typeof opts.connect === "function" ? opts.connect() : void 0 : void 0;
          };
        })(this));
        this.__db.on('error', (function(_this) {
          return function() {
            return opts != null ? typeof opts.error === "function" ? opts.error() : void 0 : void 0;
          };
        })(this));
        return this.__db.connect(dsn);
      };

      RikkiTikkiAPI.prototype.disconnect = function(callback) {
        return this.__db.close(callback);
      };

      RikkiTikkiAPI.prototype.registerApp = function(__parent) {
        this.__parent = __parent;
        return this.router = new RikkiTikkiAPI.Router(this.__parent, this.collectionMon);
      };

      return RikkiTikkiAPI;

    })(EventEmitter);
  }

  if (RikkiTikkiAPI.Util == null) {
    RikkiTikkiAPI.Util = {};
  }

  RikkiTikkiAPI.Util.queryToObject = function(string) {
    var o;
    o = {};
    string.replace('?', '').split('&').forEach((function(_this) {
      return function(v, k) {
        var p;
        if ((p = v.split('=')).length === 2) {
          return o[p[0]] = p[1];
        }
      };
    })(this));
    return o;
  };

  RikkiTikkiAPI.Util.objectToQuery = function(object) {
    return (_.map(_.pairs(object || {}), (function(_this) {
      return function(v, k) {
        return v.join('=');
      };
    })(this))).join('&');
  };

  RikkiTikkiAPI.Util.getTypeOf = function(obj) {
    return Object.prototype.toString.call(obj).slice(8, -1);
  };

  RikkiTikkiAPI.Util.getFunctionName = function(fun) {
    var n;
    if ((n = fun.toString().match(/function+\s{1,}([A-Z]{1}[a-zA-Z]*)/)) != null) {
      return n[1];
    } else {
      return null;
    }
  };

  RikkiTikkiAPI.Util.isOfType = function(value, kind) {
    return (this.getTypeOf(value)) === (this.getFunctionName(kind)) || value instanceof kind;
  };

  RikkiTikkiAPI.ConfigLoader = (function(_super) {
    __extends(ConfigLoader, _super);

    ConfigLoader.prototype.__config = null;

    function ConfigLoader(path) {
      if (path == null) {
        path = null;
      }
      if (path == null) {
        path = RikkiTikkiAPI.getFullPath();
      }
      if (RikkiTikkiAPI.configExists(path)) {
        this.load(path);
      }
    }

    ConfigLoader.prototype.load = function(path) {
      var e;
      try {
        return this.__config = JSON.parse(fs.readFileSync(path, {
          encoding: 'utf-8'
        }));
      } catch (_error) {
        e = _error;
        throw Error(e);
      }
    };

    ConfigLoader.prototype.getEnv = function(env) {
      var _ref;
      return ((_ref = this.__config) != null ? _ref[env] : void 0) || null;
    };

    ConfigLoader.prototype.toJSON = function() {
      return this.__config;
    };

    ConfigLoader.prototype.toString = function() {
      return JSON.stringify(this.__config, null, 2);
    };

    return ConfigLoader;

  })(Object);

  RikkiTikkiAPI.CONFIG_FILENAME = 'rikkitikki.json';

  RikkiTikkiAPI.CONFIG_PATH = 'config';

  RikkiTikkiAPI.getFullPath = function() {
    return path.normalize("" + (process.cwd()) + path.sep + RikkiTikkiAPI.CONFIG_PATH + path.sep + RikkiTikkiAPI.CONFIG_FILENAME);
  };

  RikkiTikkiAPI.configExists = function(path) {
    return fs.existsSync((path != null ? path.match(/\.json$/) : void 0) ? path : RikkiTikkiAPI.getFullPath());
  };

  RikkiTikkiAPI.DSNOptions = (function(_super) {
    __extends(DSNOptions, _super);

    function DSNOptions(options) {
      if (options) {
        this.setOptions(options);
      }
    }

    DSNOptions.prototype.setOptions = function(options) {
      var e;
      if (!options) {
        throw new Error('options was undefined');
      }
      if (RikkiTikkiAPI.Util.isOfType(options, String)) {
        options = RikkiTikkiAPI.Util.queryToObject(options);
      }
      if (!RikkiTikkiAPI.Util.isOfType(options, RikkiTikkiAPI.DSNOptions)) {
        try {
          return this.__options = this.__validate(options);
        } catch (_error) {
          e = _error;
          throw Error(e);
        }
      } else {
        return this.__options = options.getOptions();
      }
    };

    DSNOptions.prototype.getOptions = function() {
      return this.__options;
    };

    DSNOptions.prototype.getReplicaSet = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.replicaSet : void 0) || null;
    };

    DSNOptions.prototype.getSSL = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.ssl : void 0) || null;
    };

    DSNOptions.prototype.getConnectTimeoutMS = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.connectTimeoutMS : void 0) || null;
    };

    DSNOptions.prototype.getSocketTimeoutMS = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.socketTimeoutMS : void 0) || null;
    };

    DSNOptions.prototype.getMaxPoolSize = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.maxPoolSize : void 0) || null;
    };

    DSNOptions.prototype.getMinPoolSize = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.minPoolSize : void 0) || null;
    };

    DSNOptions.prototype.getMaxIdleTimeMS = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.maxIdleTimeMS : void 0) || null;
    };

    DSNOptions.prototype.getWaitQueueMultiple = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.waitQueueMultiple : void 0) || null;
    };

    DSNOptions.prototype.getWaitQueueTimeoutMS = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.waitQueueTimeoutMS : void 0) || null;
    };

    DSNOptions.prototype.getW = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.w : void 0) || null;
    };

    DSNOptions.prototype.getWriteConcerns = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.w : void 0) || null;
    };

    DSNOptions.prototype.getWtimeoutMS = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.wtimeoutMS : void 0) || null;
    };

    DSNOptions.prototype.getJournal = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.journal : void 0) || null;
    };

    DSNOptions.prototype.getReadPreference = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.readPreference : void 0) || null;
    };

    DSNOptions.prototype.getReadPreferenceTags = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.readPreferenceTags : void 0) || null;
    };

    DSNOptions.prototype.getUuidRepresentation = function() {
      var _ref;
      return ((_ref = this.__options) != null ? _ref.uuidRepresentation : void 0) || null;
    };

    DSNOptions.prototype.__validate = function(object) {
      var opts;
      opts = {
        replicaSet: {
          type: String
        },
        ssl: {
          type: Boolean
        },
        connectTimeoutMS: {
          type: Number
        },
        socketTimeoutMS: {
          type: Number
        },
        maxPoolSize: {
          type: Number
        },
        minPoolSize: {
          type: Number
        },
        maxIdleTimeMS: {
          type: Number
        },
        waitQueueMultiple: {
          type: Number
        },
        waitQueueTimeoutMS: {
          type: Number
        },
        w: {
          type: [Number, String],
          restrict: /^(\-?1+)|([0-9]{1})|(majority+)|(\{\w:\d\}+)$/
        },
        wtimeoutMS: {
          type: Number
        },
        journal: {
          type: Boolean
        },
        readPreference: {
          type: String,
          restrict: /^(primary+)|(primaryPreferred+)|(secondary+)|(secondaryPreferred+)|(nearest+)$/
        },
        readPreferenceTags: {
          type: String,
          restrict: /((\w+):+(\w|\d)+),?/g,
          allowMutliple: true
        },
        uuidRepresentation: {
          type: String,
          restrict: /^(standard+)|(csharpLegacy+)|(javaLegacy+)|(pythonLegacy+)$/
        }
      };
      _.each(object, (function(_this) {
        return function(value, key) {
          var found;
          if (!opts[key]) {
            throw new Error("" + key + " is not a valid Connection Option");
          }
          if ((RikkiTikkiAPI.Util.isOfType(opts[key].type, Array)) && opts[key].type.length) {
            found = false;
            _.each(opts[key].type, function(v) {
              if (RikkiTikkiAPI.Util.isOfType(value, v)) {
                return found = true;
              }
            });
            if (!found) {
              throw new TypeError("" + key + " is expected to be " + (opts[key].type.join(' or ')) + ". Was '" + (typeof value) + "'");
            }
          } else {
            if (!RikkiTikkiAPI.Util.isOfType(value = opts[key].type(value), opts[key].type)) {
              throw new TypeError("" + key + " is expected to be " + opts[key].type + ". Was " + (typeof value));
            }
            object[key] = value.valueOf();
          }
          if ((opts[key].restrict != null) && (value.match(opts[key].restrict)) === null) {
            throw new Error("" + key + " was malformed");
          }
        };
      })(this));
      return object;
    };

    DSNOptions.prototype.toJSON = function() {
      return this.__options;
    };

    DSNOptions.prototype.toString = function() {
      return RikkiTikki.Util.objectToQuery(this.__options);
    };

    return DSNOptions;

  })(Object);

  RikkiTikkiAPI.DSN = (function(_super) {
    __extends(DSN, _super);

    DSN.prototype.__dsn = null;

    function DSN(dsn) {
      if (dsn) {
        this.setDSN((dsn instanceof String ? this.parseDSNString(dsn) : dsn));
      }
    }

    DSN.prototype.parseDSNString = function(string) {
      var dsnParams, pass, protoDSN;
      if ((dsnParams = string.match(/^(mongodb\:\/\/)?(.+:?.?@)?([a-z0-9\.]+)+(:[a-zA-Z0-9]{4,5})?\,?([a-zA-Z0-9\.\,:]*)?(\/\w+)?\??([a-zA-Z0-9\_=&\.]*)?$/)) !== null) {
        return protoDSN = {
          protocol: dsnParams[1] ? dsnParams[1].split(':').shift() : null,
          username: dsnParams[2] ? (pass = dsnParams[2].replace('@', '').split(':')).shift() : null,
          password: pass && pass.length ? "" + pass : null,
          host: dsnParams[3] || null,
          port: dsnParams[4] ? parseInt(dsnParams[4].split(':').pop()) : null,
          replicas: dsnParams[5] ? _.map(dsnParams[5].split(','), function(v, k) {
            var port;
            return {
              host: (port = v.split(':')).shift(),
              port: parseInt(port.shift())
            };
          }) : null,
          database: dsnParams[6] ? dsnParams[6].split('/').pop() : null,
          options: dsnParams[7] ? new RikkiTikkiAPI.DSNOptions(dsnParams[7]) : null
        };
      }
      return null;
    };

    DSN.prototype.setOptions = function(options) {
      return this.__dsn != null ? this.__dsn : this.__dsn = {};
    };

    DSN.prototype.getOptions = function() {
      var _ref;
      return ((_ref = this.__dsn) != null ? _ref.options : void 0) || null;
    };

    DSN.prototype.setDSN = function(dsn) {
      var e;
      if (RikkiTikkiAPI.Util.isOfType(dsn, String)) {
        dsn = this.parseDSNString(dsn);
      }
      try {
        if (this.validate(dsn)) {
          return this.__dsn = dsn;
        }
      } catch (_error) {
        e = _error;
        throw Error(e);
      }
    };

    DSN.prototype.getDSN = function() {
      return this.__dsn || null;
    };

    DSN.prototype.validate = function(dsn) {
      var e, errors, oTypes, options;
      errors = [];
      oTypes = {
        protocol: {
          type: String,
          required: false,
          restrict: /^mongodb+$/
        },
        username: {
          type: String,
          required: false
        },
        password: {
          type: String,
          required: false
        },
        host: {
          type: String,
          required: true,
          restrict: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/
        },
        port: {
          type: Number,
          required: false,
          restrict: /^[0-9]{4,5}$/
        },
        replicas: {
          type: Array,
          required: false
        },
        database: {
          type: String,
          required: false
        },
        options: {
          type: RikkiTikkiAPI.DSNOptions,
          required: false
        }
      };
      _.each(oTypes, (function(_this) {
        return function(value, key) {
          if (dsn[key] != null) {
            if (!RikkiTikkiAPI.Util.isOfType(dsn[key], value.type)) {
              throw Error("" + key + " was expected to be " + (RikkiTikkiAPI.Util.getFunctionName(value.type)) + ". Type was '" + (typeof dsn[key]) + "'");
            }
            if (value.restrict && !dsn[key].toString().match(value.restrict)) {
              throw Error("" + key + " was malformed");
            }
          } else if (value.required) {
            throw Error("" + key + " was required but not defined");
          }
        };
      })(this));
      if (options) {
        try {
          options = new DSNOptions(options);
        } catch (_error) {
          e = _error;
          throw Error(e);
        }
      }
      return true;
    };

    DSN.prototype.toJSON = function() {
      return this.__dsn;
    };

    DSN.prototype.toDSN = function() {
      var userPass;
      userPass = "" + (this.__dsn.username || '') + (this.__dsn.username && this.__dsn.password ? ':' + this.__dsn.password : '');
      return "" + (this.__dsn.protocol || 'mongodb') + "://" + userPass + (userPass.length ? '@' : '') + this.__dsn.host + ":" + (this.__dsn.port || '27017') + "/" + (this.__dsn.database || '') + (this.__dsn.options ? '?' + this.__dsn.options : '');
    };

    DSN.prototype.toString = function() {
      return this.toDSN();
    };

    return DSN;

  })(Object);

  mongoose = require('mongoose');

  EventEmitter = require('events').EventEmitter;

  RikkiTikkiAPI.Connection = (function(_super) {
    __extends(Connection, _super);

    function Connection(args) {
      if (!RikkiTikkiAPI.__connection) {
        RikkiTikkiAPI.connection = mongoose.connection;
        RikkiTikkiAPI.connection.on('error', (function(_this) {
          return function(e) {
            return _this.emit('error', e.message);
          };
        })(this));
        RikkiTikkiAPI.connection.on('open', (function(_this) {
          return function() {
            return _this.emit('open');
          };
        })(this));
      }
      if (args != null) {
        this.connect(args);
      }
    }

    Connection.prototype.handleClose = function(evt) {
      return this.emit('close', evt);
    };

    Connection.prototype.connect = function(args) {
      return this.__attemptConnection(this.__dsn = new RikkiTikkiAPI.DSN(args));
    };

    Connection.prototype.__attemptConnection = function(string) {
      var e;
      try {
        this.__conn = mongoose.connect("" + string);
      } catch (_error) {
        e = _error;
        return this.emit(e);
      }
      return this.emit('connected', this.__conn);
    };

    Connection.prototype.getConnection = function() {
      return this.__conn.connections[0];
    };

    Connection.prototype.getMongoDB = function() {
      return this.getConnection().db;
    };

    Connection.prototype.getDatabaseName = function() {
      return this.getMongoDB().databaseName;
    };

    Connection.prototype.isConnected = function() {
      return this.__conn != null;
    };

    Connection.prototype.close = function(callback) {
      if (this.isConnected()) {
        return this.__conn.disconnect((function(_this) {
          return function(e) {
            _this.__conn = null;
            return typeof callback === "function" ? callback(e) : void 0;
          };
        })(this));
      }
    };

    return Connection;

  })(EventEmitter);

  RikkiTikkiAPI.CollectionManager = (function(_super) {
    __extends(CollectionManager, _super);

    function CollectionManager(__conn) {
      this.__conn = __conn;
      if (!this.__conn) {
        throw Error('RikkiTikkiAPI.CollectionManager requires a RikkiTikkiAPI.Connection as arg1');
      }
      if (!RikkiTikkiAPI.Util.isOfType(this.__conn, RikkiTikkiAPI.Connection)) {
        throw Error("RikkiTikkiAPI.Connection arg1 must be RikkiTikkiAPI.Connection. Type was '" + (typeof this.__conn) + "'");
      }
      this.__db = this.__conn.getMongoDB() || (function() {
        throw Error('RikkiTikkiAPI.Connection is broken');
      })();
    }

    CollectionManager.prototype.createCollection = function(name, opts, callback) {
      if (typeof opts === 'function') {
        if (callback == null) {
          callback = opts;
        }
      }
      return this.__db.createCollection(name, opts, (function(_this) {
        return function(e, collection) {
          return typeof callback === "function" ? callback(e, collection) : void 0;
        };
      })(this));
    };

    CollectionManager.prototype.dropCollection = function(name, callback) {
      return this.getCollection(name, (function(_this) {
        return function(e, collection) {
          return collection.drop(function(e, res) {
            return typeof callback === "function" ? callback(e, collection) : void 0;
          });
        };
      })(this));
    };

    CollectionManager.prototype.renameCollection = function(oldName, newName, callback) {
      return this.getCollection(oldName, (function(_this) {
        return function(e, collection) {
          return collection.rename(newName, {
            dropTarget: true
          }, function(e, res) {
            return typeof callback === "function" ? callback(e, res) : void 0;
          });
        };
      })(this));
    };

    CollectionManager.prototype.getCollection = function(name, callback) {
      return this.__db.collection(name, (function(_this) {
        return function(e, collection) {
          return typeof callback === "function" ? callback(e, collection) : void 0;
        };
      })(this));
    };

    return CollectionManager;

  })(EventEmitter);

  RikkiTikkiAPI.CollectionMonitor = (function(_super) {
    __extends(CollectionMonitor, _super);

    function CollectionMonitor(__db, opts) {
      var _initialized;
      this.__db = __db;
      if (opts == null) {
        opts = {
          interval: 0
        };
      }
      this.__collectionNames = new ArrayCollection([]);
      _initialized = false;
      this.__collectionNames.on('collectionChanged', (function(_this) {
        return function(data) {
          var type;
          type = 'changed';
          if (!_initialized) {
            _initialized = true;
            type = 'init';
          }
          return _this.emit(type, data);
        };
      })(this));
      this.refresh();
      if ((opts.interval != null) && opts.interval > 0) {
        this.start(opts.interval);
      }
    }

    CollectionMonitor.prototype.refresh = function(callback) {
      return this.__db.collectionNames((function(_this) {
        return function(e, names) {
          var list;
          if ((names != null ? names.length : void 0) > 0) {
            _this.__collectionNames.setSource(list = _.map(names, function(v) {
              return {
                name: v['name']
              };
            }));
          }
          return typeof callback === "function" ? callback(e, list) : void 0;
        };
      })(this));
    };

    CollectionMonitor.prototype.start = function(interval) {
      if (interval == null) {
        interval = 20;
      }
      return this.__iVal = setInterval(((function(_this) {
        return function() {
          return _this.refresh();
        };
      })(this)), interval);
    };

    CollectionMonitor.prototype.stop = function() {
      if (this.__iVal != null) {
        return clearInterval(this.__iVal);
      }
    };

    CollectionMonitor.prototype.getNames = function() {
      return _.pluck(this.__collectionNames.__list, 'name');
    };

    CollectionMonitor.prototype.collectionExists = function(name) {
      return this.getNames().lastIndexOf(name > -1);
    };

    return CollectionMonitor;

  })(EventEmitter);

  RikkiTikkiAPI.AbstractAdapter = (function(_super) {
    __extends(AbstractAdapter, _super);

    AbstractAdapter.prototype.required = [];

    function AbstractAdapter(params) {
      this.params = params;
      _.each(this.required, (function(_this) {
        return function(param) {
          if (!_this.params[param]) {
            throw Error("required param '" + param + "' was not defined in the adapter params object");
          }
        };
      })(this));
    }

    AbstractAdapter.prototype.addRoute = function(route, method, handler) {};

    AbstractAdapter.prototype.router = function() {
      return null;
    };

    return AbstractAdapter;

  })(Object);

  RikkiTikkiAPI.ExpressAdapter = (function(_super) {
    __extends(ExpressAdapter, _super);

    function ExpressAdapter() {
      return ExpressAdapter.__super__.constructor.apply(this, arguments);
    }

    ExpressAdapter.prototype.required = ['app'];

    ExpressAdapter.prototype.addRoute = function(route, method, handler) {
      return this.params.app[method](route, handler);
    };

    ExpressAdapter.prototype.router = function() {
      return this.params.app;
    };

    return ExpressAdapter;

  })(RikkiTikkiAPI.AbstractAdapter);

  RikkiTikkiAPI.HapiAdapter = (function(_super) {
    __extends(HapiAdapter, _super);

    function HapiAdapter() {
      return HapiAdapter.__super__.constructor.apply(this, arguments);
    }

    HapiAdapter.prototype.required = ['server'];

    HapiAdapter.prototype.addRoute = function(route, method, handler) {
      return this.params.server.route({
        path: route,
        method: method,
        handler: handler
      });
    };

    HapiAdapter.prototype.router = function() {
      return this.params.server;
    };

    return HapiAdapter;

  })(RikkiTikkiAPI.AbstractAdapter);

  url = require('url');

  path = require('path');

  RikkiTikkiAPI.RoutesAdapter = (function(_super) {
    __extends(RoutesAdapter, _super);

    RoutesAdapter.prototype.required = ['router'];

    RoutesAdapter.prototype.routes = [];

    function RoutesAdapter(params) {
      var e;
      this.params = params != null ? params : {};
      this.requestHandler = __bind(this.requestHandler, this);
      try {
        RoutesAdapter.__super__.constructor.call(this, this.params);
      } catch (_error) {
        e = _error;
        throw Error(e.message);
      }
    }

    RoutesAdapter.prototype.requestHandler = function(req, res) {
      var normalPathname, parsed, pathname, route;
      normalPathname = path.normalize(pathname = (parsed = url.parse(req.url)).pathname).replace(/\\/g, '/');
      route = this.params.router.match(normalPathname);
      if (!route) {
        return res.error(404);
      }
      if ((this.routes.lastIndexOf(route.route)) >= 0) {
        return route.fn[req.method](req, res);
      } else {
        return route.fn(req, res);
      }
    };

    RoutesAdapter.prototype.addRoute = function(route, method, handler) {
      var fn, match;
      fn = (match = this.params.router.match(route)) != null ? match.fn : {};
      fn[method.toUpperCase()] = handler;
      this.routes = _.union(this.routes, route);
      return this.params.router.addRoute(route, fn);
    };

    return RoutesAdapter;

  })(RikkiTikkiAPI.AbstractAdapter);

  RikkiTikkiAPI.API_BASEPATH = '/api';

  RikkiTikkiAPI.API_VERSION = '1';

  RikkiTikkiAPI.getAPIPath = function() {
    return "" + RikkiTikkiAPI.API_BASEPATH + "/" + RikkiTikkiAPI.API_VERSION;
  };

  RikkiTikkiAPI.Router = (function(_super) {
    __extends(Router, _super);

    function Router(__parent, __collections, __adapter) {
      this.__parent = __parent;
      this.__collections = __collections;
      this.__adapter = __adapter;
      if (!this.__adapter) {
        throw Error('adapter must be defined');
      }
    }

    Router.prototype.__routes = {
      list: function(req, res, next) {
        return console.log('list');
      },
      show: function(req, res, next) {
        return console.log('show');
      },
      edit: function(req, res, next) {
        return console.log('edit');
      },
      update: function(req, res, next) {
        return console.log('update');
      },
      create: function(req, res, next) {
        return console.log('create');
      },
      destroy: function(req, res, next) {
        return console.log('destroy');
      },
      index: function(req, res, next) {
        return console.log('index');
      }
    };

    Router.prototype.initializeApp = function(parent) {};

    Router.prototype.getAdapter = function() {
      return this.__adapter;
    };

    Router.prototype.intializeRoutes = function() {
      var api_path;
      api_path = RikkiTikkiAPI.getAPIPath();
      return _.each(this.__collections, function(name) {
        var key, method, obj;
        verbose && logger.log('debug', "" + name + ":");
        obj = {};
        name = name.split('.').pop();
        if (obj.before) {
          path = "" + api_path + "/" + name + "/:" + name + "_id";
          app.all(path, obj.before);
          verbose && (typeof logger !== "undefined" && logger !== null ? logger.log('debug', "     ALL " + path + " -> before") : void 0);
          path = "" + api_path + "/" + name + "/:" + name + "_id/*";
          app.all(path, obj.before);
          verbose && (typeof logger !== "undefined" && logger !== null ? logger.log('debug', "     ALL " + path + " -> before") : void 0);
        }
        for (key in this.__routes) {
          if (~['name', 'prefix', 'engine', 'before'].indexOf(key)) {
            continue;
          }
          switch (key) {
            case 'show':
              method = 'get';
              path = "" + api_path + "/" + name + "/:" + name + "_id";
              break;
            case 'list':
              method = 'get';
              path = "" + api_path + "/" + name + "s";
              break;
            case 'edit':
              method = 'get';
              path = "" + api_path + "/" + name + "/:" + name + "_id/edit";
              break;
            case 'update':
              method = 'put';
              path = "" + api_path + "/" + name + "/:" + name + "_id";
              break;
            case 'create':
              method = 'post';
              path = "" + api_path + "/" + name;
              break;
            case 'destroy':
              method = 'delete';
              path = "" + api_path + "/" + name + "/:" + name + "_id";
              break;
            case 'index':
              method = 'get';
              path = "" + api_path + "/" + (name !== 'index' ? name : '');
              break;
            default:
              throw new Error("unrecognized route: " + name + "." + key);
          }
          path = "" + prefix + path;
          this.__adapter.addRoute(path.method, this.__routes[key]);
          verbose && logger.log('debug', "" + (method.toUpperCase()) + " " + path + " -> " + key);
        }
        return parent.use(app);
      });
    };

    return Router;

  })(Object);

}).call(this);
