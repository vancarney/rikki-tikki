{
  "author": {
    "name": "Van Carney",
    "email": "carney.van@gmail.com"
  },
  "name": "strictly-hash",
  "description": "A strict Hash implementation allowing key restriction and virtualization",
  "keywords": [
    "hash",
    "design patterns",
    "freeze",
    "frozen",
    "seal",
    "sealed",
    "virtual object",
    "object oriented",
    "coffeescript"
  ],
  "version": "0.0.2",
  "main": "./index.js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "repository": {
    "type": "git",
    "url": "github.com/vancarney/strictly-hash.git"
  },
  "dependencies": {},
  "devDependencies": {
    "coffee-script": ">=1.7.1",
    "mocha": ">=1.12.0",
    "chai": ">=1.7.2",
    "docco": ">=0.6.2"
  },
  "homepage": "https://github.com/vancarney/strictly-hash",
  "scripts": {
    "test": "cake test"
  },
  "gitHead": "95fc67da83cf19e78f30e948a5400d722976bce6",
  "readme": "strictly-hash\n=============\n\nA strict Hash implementation allowing key restriction and virtualization\n\n[![Build Status](https://travis-ci.org/vancarney/sparse.png)](https://travis-ci.org/vancarney/strictly-hash)\n[![NPM Version](http://img.shields.io/npm/v/strictly-hash.svg)](https://www.npmjs.org/package/strictly-hash)\n\nInstallation\n-----------\n\nnpm:\n```\nnpm install strictly-hash\n```\n\nbower\n```\nbower install strictly-hash\n```\n\nUsage\n-----------\n\n\n*coffeescript* example:\n\n```\ninst = new Hash (\n  param_one:\"foo\"\n  param_two:\"bar\"\n), ['param_one', 'param_two']\n\ninst.set 'param_three', 'baz'\n# param_three isn't allowed - prints 'undefined'\nconsole.log inst.get 'param_three'\n# prints 'foobar'\nconsole.log \"#{inst.get 'param_one'}#{inst.get 'param_two'}\"\n```\n\n*javascript* example:\n\n```\nvar inst = new Hash({\n  param_one:'foo',\n  param_two:'bar'\n}, ['param_one', 'param_two']);\n\ninst.set( 'param_three', 'baz' );\n// param_three isn\\'t allowed - prints \\\"undefined\\\"\nconsole.log( inst.get( 'param_three' ) );\n// prints \\\"foobar\\\"\nconsole.log( \"\"+inst.get( 'param_one')+inst.get( 'param_two' ) );\n``` \n\n\n\n*coffeescript* example:\n\n```\nclass Instance extends Hash\n  constructor:->\n  \tInstance.__super__.constructor.call @, (\n  \t  param_one:\"foo\"\n  \t  param_two:\"bar\"\n  \t), ['param_one', 'param_two']\ninst = new Instance\ninst.set 'param_three', 'baz'\n# param_three isn't allowed - prints 'undefined'\nconsole.log inst.get 'param_three'\n# prints 'foobar'\nconsole.log \"#{inst.get 'param_one'}#{inst.get 'param_two'}\"\n``` \n\n\n*javascript* example:\n\n```\n(function() {\n  var Instance, Hash,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  Instance = (function(_super) {\n    __extends(Instance, _super);\n    \n    function Instance() {\n      return Instance.__super__.constructor.apply(this, {\n\t  \t  param_one:\"foo\",\n\t  \t  param_two:\"bar\"\n      }, ['param_one', 'param_two']);\n    }\n\n  })(Hash);\n\n}).call(this);\n```\n\n\nMethods\n-----------\n\n#### get(key)\ngets key/value from virtualized object\n\n#### set(key, value)\nsets key/value to virtualized object\n\n#### has(key)\ntests for key existance\n\n#### del(key)\nremoves key from hash\n\n#### forEach(iterator, scope)\ntraverses hash, calling iterator on each node\n\n#### keys()\nreturns object keys\n\n#### valueOf()\nreturns object\n\n#### toJSON()\nreturns object\n\n#### toString(pretty)\nreturns returns string representation of hash, if pretty is `true` will format the string for readability\n\n#### canFreeze()\nreturns true if environment supports Object.freeze\n\n#### freeze()\nfreezes Hash object if feature supported by environment\n\n#### isFrozen()\nreturns true if Hash is frozen\n\n#### canSeal()\nreturns true if environment supports Object.seal\n\n#### seal()\nseals Hash object if feature supported by environment\n\n#### isSealed()\nreturns true if Hash is sealed\n\n#### canPreventExtensions()\nreturns true if environment supports Object.canPreventExtensions\n\n#### isExtensible()\nreturns false if Hash is not Extensible\n\n#### preventExtensions()\nprevent Extensability for Hash object if feature supported by environment",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/vancarney/strictly-hash/issues"
  },
  "_id": "strictly-hash@0.0.2",
  "_shasum": "a33ac2319beef6a595c604cff93b89c7f4dad121",
  "_from": "strictly-hash@>=0.0.2"
}
